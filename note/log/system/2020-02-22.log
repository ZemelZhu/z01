2020-02-22 11:54:52,660|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 2628 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 11:54:52,676|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 11:54:53,504|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 11:54:53,520|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 11:54:53,723|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 11:54:53,738|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 11:54:53,738|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 11:54:53,738|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 11:54:53,801|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 11:54:53,801|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 1063 ms
2020-02-22 11:54:53,910|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 11:54:53,910|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:29)
TestBean constrance
2020-02-22 11:54:53,910|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 11:54:53,910|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:48)
TestBean setBeanName
2020-02-22 11:54:53,910|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:43)
TestBean setBeanFactory
2020-02-22 11:54:53,910|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:63)
TestBean setApplicationContext
2020-02-22 11:54:53,910|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 11:54:53,910|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:38)
TestBean init
2020-02-22 11:54:53,910|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:58)
TestBean afterPropertiesSet
2020-02-22 11:54:53,910|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 11:54:53,910|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 11:54:54,082|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 11:54:54,238|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 11:54:54,316|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 11:54:54,613|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 11:54:54,629|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 11:54:54,629|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 11:54:54,629|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 11:54:54,629|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 11:54:54,629|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 11:54:54,629|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 11:54:54,629|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 11:54:54,629|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@118102ee
2020-02-22 11:54:54,879|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 11:54:54,879|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 11:54:54,894|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 11:54:54,910|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 11:54:54,910|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.769 seconds (JVM running for 3.415)
2020-02-22 12:24:57,398|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 10232 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 12:24:57,401|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 12:24:57,998|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 12:24:58,009|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 12:24:58,177|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 12:24:58,183|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 12:24:58,184|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 12:24:58,184|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 12:24:58,248|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 12:24:58,248|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 784 ms
2020-02-22 12:24:58,340|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 12:24:58,344|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 12:24:58,344|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 12:24:58,344|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 12:24:58,344|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 12:24:58,481|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 12:24:58,629|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 12:24:58,681|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 12:24:58,950|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 12:24:58,952|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 12:24:58,957|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 12:24:58,957|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 12:24:58,958|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 12:24:58,958|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 12:24:58,958|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 12:24:58,958|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 12:24:58,959|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@1ac45389
2020-02-22 12:24:59,128|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 12:24:59,128|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 12:24:59,133|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 12:24:59,149|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 12:24:59,151|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.09 seconds (JVM running for 2.553)
2020-02-22 12:58:07,578|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 22812 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 12:58:07,580|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 12:58:08,194|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 12:58:08,205|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 12:58:08,374|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 12:58:08,380|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 12:58:08,381|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 12:58:08,381|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 12:58:08,448|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 12:58:08,448|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 796 ms
2020-02-22 12:58:08,537|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 12:58:08,541|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 12:58:08,542|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 12:58:08,542|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 12:58:08,545|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 12:58:08,546|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 12:58:08,547|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 12:58:08,547|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 12:58:08,547|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 12:58:08,547|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 12:58:08,547|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 12:58:08,547|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 12:58:08,547|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 12:58:08,547|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 12:58:08,547|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 12:58:08,547|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 12:58:08,685|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 12:58:08,831|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 12:58:08,881|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 12:58:09,152|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 12:58:09,153|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 12:58:09,159|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 12:58:09,159|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 12:58:09,160|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 12:58:09,160|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 12:58:09,160|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 12:58:09,160|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 12:58:09,160|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@56078cea
2020-02-22 12:58:09,329|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 12:58:09,330|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 12:58:09,335|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 12:58:09,350|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 12:58:09,352|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.115 seconds (JVM running for 2.587)
2020-02-22 12:58:37,796|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 2036 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 12:58:37,799|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 12:58:38,390|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 12:58:38,401|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 12:58:38,570|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 12:58:38,577|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 12:58:38,577|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 12:58:38,577|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 12:58:38,644|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 12:58:38,644|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 780 ms
2020-02-22 12:58:38,732|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 12:58:38,733|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 12:58:38,735|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 12:58:38,736|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 12:58:38,736|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 12:58:38,739|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 12:58:38,740|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 12:58:38,740|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 12:58:38,740|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 12:58:38,740|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 12:58:38,740|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 12:58:38,741|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 12:58:38,741|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 12:58:38,741|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 12:58:38,741|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 12:58:38,741|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 12:58:38,741|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 12:58:38,741|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 12:58:38,741|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 12:58:38,742|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 12:58:38,742|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 12:58:38,742|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 12:58:38,878|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 12:58:39,023|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 12:58:39,072|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 12:58:39,350|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 12:58:39,351|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 12:58:39,356|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 12:58:39,357|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 12:58:39,357|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 12:58:39,358|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 12:58:39,358|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 12:58:39,358|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 12:58:39,358|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@6869a3b3
2020-02-22 12:58:39,527|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 12:58:39,528|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 12:58:39,533|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 12:58:39,548|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 12:58:39,551|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.093 seconds (JVM running for 2.58)
2020-02-22 13:03:58,297|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 14308 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 13:03:58,300|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 13:03:58,943|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 13:03:58,957|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 13:03:59,167|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 13:03:59,174|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 13:03:59,175|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 13:03:59,175|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 13:03:59,253|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 13:03:59,253|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 897 ms
2020-02-22 13:04:47,439|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 13:04:47,440|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 13:04:47,446|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 13:04:47,447|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 13:04:47,448|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 13:04:47,452|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 13:04:47,454|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 13:04:47,454|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 13:04:47,454|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 13:04:47,454|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 13:04:47,454|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 13:04:47,454|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 13:04:47,455|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 13:04:47,455|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 13:04:47,455|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 13:04:47,455|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 13:04:47,455|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 13:04:47,455|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 13:04:47,455|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 13:04:47,455|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 13:04:47,455|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 13:04:47,456|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 13:04:47,637|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 13:04:47,832|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 13:04:47,933|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 13:04:48,201|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 13:04:48,203|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 13:04:48,209|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 13:04:48,210|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 13:04:48,210|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 13:04:48,211|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 13:04:48,211|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 13:04:48,211|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 13:04:48,211|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@28e0e464
2020-02-22 13:04:48,404|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 13:04:48,405|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 13:04:48,410|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 13:04:48,427|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 13:04:48,430|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 50.561 seconds (JVM running for 51.517)
2020-02-22 13:05:04,182|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 13:05:04,182|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 13:05:04,182|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 13:05:04,182|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 13:05:04,183|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 13:05:04,186|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 13:05:04,187|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 13:05:04,187|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 13:05:04,188|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 13:05:04,188|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 13:05:06,644|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 21624 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 13:05:06,647|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 13:06:06,404|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 13:06:06,419|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 13:06:06,646|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 13:06:06,653|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 13:06:06,654|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 13:06:06,654|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 13:06:06,723|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 13:06:06,724|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 60011 ms
2020-02-22 13:06:06,854|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 13:06:06,855|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 13:06:06,861|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 13:06:06,862|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 13:06:06,862|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 13:06:06,867|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 13:06:06,869|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 13:06:06,869|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 13:06:06,869|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 13:06:06,869|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 13:06:06,869|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 13:06:06,869|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 13:06:06,869|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 13:06:06,870|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 13:06:06,870|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 13:06:06,870|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 13:06:06,870|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 13:06:06,870|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 13:06:06,870|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 13:06:06,870|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 13:06:06,870|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 13:06:06,870|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 13:06:07,058|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 13:06:07,273|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 13:06:07,408|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 13:06:07,678|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 13:06:07,680|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 13:06:07,686|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 13:06:07,687|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 13:06:07,687|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 13:06:07,688|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 13:06:07,688|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 13:06:07,688|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 13:06:07,688|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@7a6ea47d
2020-02-22 13:06:07,880|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 13:06:07,880|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 13:06:07,885|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 13:06:07,902|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 13:06:07,905|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 61.731 seconds (JVM running for 62.315)
2020-02-22 13:06:54,562|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 13:06:54,562|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 13:06:54,562|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 13:06:54,562|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 13:06:54,563|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 13:06:54,566|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 13:06:54,566|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 13:06:54,567|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 13:06:54,567|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 13:06:54,567|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 13:06:56,968|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 25532 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 13:06:56,972|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 13:07:00,685|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 13:07:00,700|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 13:07:00,918|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 13:07:00,934|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 13:07:00,934|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 13:07:00,934|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 13:07:01,000|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 13:07:01,001|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 3965 ms
2020-02-22 13:07:01,099|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 13:07:01,100|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 13:07:01,105|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 13:07:01,106|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 13:07:01,106|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 13:07:01,111|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 13:07:01,112|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 13:07:01,112|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 13:07:01,112|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 13:07:01,112|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 13:07:01,112|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 13:07:01,112|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 13:07:01,112|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 13:07:01,113|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 13:07:01,113|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 13:07:01,113|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 13:07:01,113|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 13:07:01,113|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 13:07:01,113|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 13:07:01,113|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 13:07:01,113|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 13:07:01,113|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 13:07:01,299|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 13:07:01,506|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 13:07:01,613|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 13:07:01,887|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 13:07:01,888|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 13:07:01,894|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 13:07:01,895|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 13:07:01,895|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 13:07:01,896|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 13:07:01,896|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 13:07:01,896|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 13:07:01,896|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@1e3ff233
2020-02-22 13:07:02,095|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 13:07:02,096|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 13:07:02,101|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 13:07:02,119|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 13:07:02,122|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 5.61 seconds (JVM running for 6.167)
2020-02-22 13:07:04,134|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 13:07:04,135|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 13:07:04,135|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 13:07:04,135|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 13:07:04,135|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 13:07:04,139|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 13:07:04,139|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 13:07:04,140|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 13:07:04,140|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 13:07:04,140|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 13:07:06,528|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 6720 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 13:07:06,560|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 13:07:07,184|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 13:07:07,197|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 13:07:07,408|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 13:07:07,415|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 13:07:07,416|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 13:07:07,416|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 13:07:07,491|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 13:07:07,491|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 898 ms
2020-02-22 13:07:07,587|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 13:07:07,587|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 13:07:07,592|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 13:07:07,593|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 13:07:07,593|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 13:07:07,598|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 13:07:07,599|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 13:07:07,599|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 13:07:07,599|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 13:07:07,599|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 13:07:07,599|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 13:07:07,600|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 13:07:07,600|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 13:07:07,600|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 13:07:07,600|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 13:07:07,600|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 13:07:07,600|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 13:07:07,600|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 13:07:07,601|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 13:07:07,601|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 13:07:07,601|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 13:07:07,601|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 13:07:07,784|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 13:07:07,975|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 13:07:08,076|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 13:07:08,345|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 13:07:08,346|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 13:07:08,353|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 13:07:08,354|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 13:07:08,354|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 13:07:08,355|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 13:07:08,355|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 13:07:08,355|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 13:07:08,355|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@48a2db72
2020-02-22 13:07:08,547|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 13:07:08,547|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 13:07:08,552|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 13:07:08,569|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 13:07:08,571|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.486 seconds (JVM running for 3.049)
2020-02-22 13:07:35,377|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 13:07:35,378|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 13:07:35,378|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 13:07:35,378|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 13:07:35,378|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 13:07:35,379|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 13:07:35,380|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 13:07:35,380|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 13:07:35,380|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 13:07:35,381|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 13:07:37,856|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 16896 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 13:07:37,888|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 13:07:38,530|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 13:07:38,544|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 13:07:38,756|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 13:07:38,764|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 13:07:38,764|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 13:07:38,765|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 13:07:38,840|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 13:07:38,840|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 915 ms
2020-02-22 13:08:07,661|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 13:08:07,662|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 13:08:07,669|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 13:08:07,670|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 13:08:07,671|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 13:08:07,676|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 13:08:07,677|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 13:08:07,678|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 13:08:07,678|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 13:08:07,679|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 13:08:07,679|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 13:08:07,679|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 13:08:07,679|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 13:08:09,962|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 1676 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 13:08:09,965|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 13:08:10,617|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 13:08:10,630|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 13:08:10,841|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 13:08:10,848|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 13:08:10,848|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 13:08:10,848|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 13:08:10,922|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 13:08:10,923|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 894 ms
2020-02-22 13:08:11,019|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 13:08:11,020|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 13:08:11,024|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 13:08:11,025|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 13:08:11,026|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 13:08:11,030|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 13:08:11,031|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 13:08:11,031|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 13:08:11,031|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 13:08:11,032|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 13:08:11,032|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 13:08:11,032|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 13:08:11,032|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 13:08:11,032|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 13:08:11,032|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 13:08:11,032|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 13:08:11,032|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 13:08:11,033|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 13:08:11,033|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 13:08:11,033|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 13:08:11,033|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 13:08:11,033|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 13:08:11,214|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 13:08:11,405|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 13:08:11,509|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 13:08:11,781|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 13:08:11,782|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 13:08:11,789|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 13:08:11,789|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 13:08:11,790|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 13:08:11,790|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 13:08:11,790|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 13:08:11,790|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 13:08:11,791|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@6397248c
2020-02-22 13:08:11,984|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 13:08:11,984|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 13:08:11,989|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 13:08:12,007|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 13:08:12,009|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.495 seconds (JVM running for 3.037)
2020-02-22 13:08:18,010|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 13:08:18,010|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 13:08:18,010|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 13:08:18,010|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 13:08:18,011|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 13:08:18,012|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 13:08:18,013|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 13:08:18,013|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 13:08:18,013|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 13:08:18,013|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 13:08:20,395|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 3860 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 13:08:20,398|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 13:08:21,074|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 13:08:21,088|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 13:08:21,302|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 13:08:21,309|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 13:08:21,310|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 13:08:21,310|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 13:08:21,387|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 13:08:21,387|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 923 ms
2020-02-22 13:08:21,485|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 13:08:21,485|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 13:08:21,490|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 13:08:21,491|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 13:08:21,492|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 13:08:21,497|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 13:08:21,498|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 13:08:21,498|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 13:08:21,498|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 13:08:21,498|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 13:08:21,499|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 13:08:21,499|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 13:08:21,499|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 13:08:21,499|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 13:08:21,499|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 13:08:21,499|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 13:08:21,499|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 13:08:21,499|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 13:08:21,500|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 13:08:21,500|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 13:08:21,500|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 13:08:21,500|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 13:08:21,688|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 13:08:21,898|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 13:08:22,014|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 13:08:22,288|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 13:08:22,290|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 13:08:22,297|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 13:08:22,297|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 13:08:22,297|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 13:08:22,298|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 13:08:22,298|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 13:08:22,298|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 13:08:22,298|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@2091833
2020-02-22 13:08:22,495|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 13:08:22,495|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 13:08:22,500|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 13:08:22,518|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 13:08:22,521|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.554 seconds (JVM running for 3.113)
2020-02-22 14:41:15,024|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 14:41:15,024|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 14:41:15,024|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 14:41:15,024|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 14:41:15,024|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 14:41:15,026|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 14:41:15,026|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 14:41:15,027|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 14:41:15,027|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 14:41:15,027|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 14:41:17,622|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 10412 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 14:41:17,654|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 14:41:18,388|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 14:41:18,400|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 14:41:18,624|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 14:41:18,631|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 14:41:18,632|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 14:41:18,632|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 14:41:18,702|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 14:41:18,702|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 998 ms
2020-02-22 14:41:18,799|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 14:41:18,800|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 14:41:18,805|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 14:41:18,807|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 14:41:18,807|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 14:41:18,811|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 14:41:18,813|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 14:41:18,813|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 14:41:18,813|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 14:41:18,813|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 14:41:18,813|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 14:41:18,813|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 14:41:18,814|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 14:41:18,814|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 14:41:18,814|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 14:41:18,814|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 14:41:18,814|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 14:41:18,814|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 14:41:18,814|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 14:41:18,814|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 14:41:18,814|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 14:41:18,814|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 14:41:19,002|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 14:41:19,205|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 14:41:19,333|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 14:41:19,615|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 14:41:19,616|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 14:41:19,624|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 14:41:19,624|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 14:41:19,625|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 14:41:19,626|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 14:41:19,626|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 14:41:19,626|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 14:41:19,626|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@6cbe68e9
2020-02-22 14:48:09,053|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 14:48:09,053|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 14:48:09,060|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 14:48:11,284|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 11776 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 14:48:11,290|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 14:48:40,183|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 14:48:40,197|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 14:48:40,415|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 14:48:40,421|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 14:48:40,422|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 14:48:40,422|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 14:48:40,489|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 14:48:40,489|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 29135 ms
2020-02-22 14:48:40,584|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 14:48:40,585|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 14:48:40,590|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 14:48:40,591|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 14:48:40,591|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 14:48:40,595|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 14:48:40,596|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 14:48:40,597|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 14:48:40,597|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 14:48:40,597|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 14:48:40,597|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 14:48:40,597|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 14:48:40,597|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 14:48:40,597|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 14:48:40,597|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 14:48:40,598|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 14:48:40,598|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 14:48:40,598|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 14:48:40,598|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 14:48:40,598|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 14:48:40,598|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 14:48:40,598|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 14:48:40,774|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 14:48:40,967|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 14:48:41,070|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 14:48:41,338|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 14:48:41,340|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 14:48:41,346|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 14:48:41,346|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 14:48:41,347|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 14:48:41,347|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 14:48:41,347|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 14:48:41,347|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 14:48:41,348|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@546394ed
2020-02-22 14:48:46,640|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 14:48:46,640|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 14:48:46,646|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 14:48:46,664|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 14:48:46,666|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 35.825 seconds (JVM running for 36.358)
2020-02-22 14:48:52,120|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 14:48:52,120|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 14:48:52,121|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 14:48:52,121|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 14:48:52,121|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 14:48:52,124|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 14:48:52,125|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 14:48:52,125|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 14:48:52,126|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 14:48:52,126|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 14:48:54,531|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 19716 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 14:48:54,534|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 14:49:17,121|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 14:49:17,134|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 14:49:17,353|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 14:49:17,359|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 14:49:17,360|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 14:49:17,360|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 14:49:17,428|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 14:49:17,429|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 22826 ms
2020-02-22 14:49:17,526|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 14:49:17,527|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 14:49:17,531|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 14:49:17,532|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 14:49:17,533|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 14:49:17,537|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 14:49:17,538|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 14:49:17,538|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 14:49:17,538|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 14:49:17,539|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 14:49:17,539|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 14:49:17,539|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 14:49:17,539|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 14:49:17,539|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 14:49:17,539|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 14:49:17,539|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 14:49:17,539|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 14:49:17,540|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 14:49:17,540|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 14:49:17,540|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 14:49:17,540|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 14:49:17,540|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 14:49:17,718|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 14:49:17,914|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 14:49:18,030|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 14:49:18,300|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 14:49:18,302|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 14:49:18,308|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 14:49:18,308|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 14:49:18,308|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 14:49:18,309|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 14:49:18,309|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 14:49:18,309|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 14:49:18,309|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@414f87a9
2020-02-22 14:49:18,504|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 14:49:18,504|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 14:49:18,509|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 14:49:18,526|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 14:49:18,528|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 24.438 seconds (JVM running for 25.007)
2020-02-22 14:49:43,864|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 14:49:43,865|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 14:49:43,865|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 14:49:43,865|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 14:49:43,865|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 14:49:43,869|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 14:49:43,869|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 14:49:43,870|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 14:49:43,870|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 14:49:43,870|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 14:49:46,254|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 21344 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 14:49:46,285|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 14:49:46,923|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 14:49:46,935|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 14:49:47,146|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 14:49:47,153|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 14:49:47,154|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 14:49:47,154|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 14:49:47,229|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 14:49:47,230|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 908 ms
2020-02-22 14:49:47,324|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 14:49:47,325|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 14:49:47,330|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 14:49:47,331|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 14:49:47,331|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 14:49:47,335|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 14:49:47,337|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 14:49:47,337|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 14:49:47,337|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 14:49:47,337|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 14:49:47,337|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 14:49:47,337|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 14:49:47,338|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 14:49:47,338|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 14:49:47,338|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 14:49:47,338|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 14:49:47,338|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 14:49:47,338|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 14:49:47,338|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 14:49:47,338|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 14:49:47,338|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 14:49:47,338|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 14:49:47,521|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 14:49:47,714|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 14:49:47,815|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 14:49:48,085|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 14:49:48,087|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 14:49:48,094|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 14:49:48,094|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 14:49:48,095|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 14:49:48,095|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 14:49:48,095|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 14:49:48,095|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 14:49:48,095|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@8bd076a
2020-02-22 14:49:48,287|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 14:49:48,288|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 14:49:48,293|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 14:49:48,311|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 14:49:48,313|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.494 seconds (JVM running for 3.031)
2020-02-22 15:43:42,716|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 15:43:42,716|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 15:43:42,717|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 15:43:42,717|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 15:43:42,717|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 15:43:42,719|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 15:43:42,720|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 15:43:42,720|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 15:43:42,720|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 15:43:42,720|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 15:43:46,452|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 20904 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 15:43:46,486|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 15:43:47,118|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 15:43:47,131|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 15:43:47,356|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 15:43:47,371|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 15:43:47,372|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 15:43:47,372|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 15:43:47,442|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 15:43:47,442|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 917 ms
2020-02-22 15:43:47,576|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 15:43:47,684|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 15:43:47,998|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 15:43:47,999|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 15:43:48,004|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 15:43:48,005|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 15:43:48,005|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 15:43:48,010|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 15:43:48,011|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 15:43:48,011|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 15:43:48,011|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 15:43:48,011|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 15:43:48,011|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 15:43:48,011|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 15:43:48,012|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 15:43:48,012|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 15:43:48,012|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 15:43:48,012|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 15:43:48,012|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 15:43:48,012|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 15:43:48,012|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 15:43:48,012|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 15:43:48,012|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 15:43:48,013|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 15:43:48,191|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 15:43:48,443|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 15:43:48,444|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 15:43:48,451|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 15:43:48,451|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 15:43:48,452|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 15:43:48,453|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 15:43:48,453|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 15:43:48,453|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 15:43:48,453|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@6002e944
2020-02-22 15:43:48,546|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 15:43:48,546|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 15:43:48,551|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 15:43:48,569|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 15:43:48,572|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.554 seconds (JVM running for 3.09)
2020-02-22 15:44:25,372|INFO |http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-22 15:44:25,372|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)
Initializing Servlet 'dispatcherServlet'
2020-02-22 15:44:25,387|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)
Completed initialization in 15 ms
2020-02-22 15:45:59,189|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 15:45:59,189|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 15:45:59,189|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 15:45:59,189|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 15:45:59,189|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 15:45:59,190|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 15:45:59,191|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 15:45:59,191|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 15:45:59,191|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 15:45:59,194|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 15:46:04,550|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 2628 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 15:46:04,583|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 15:46:05,191|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 15:46:05,203|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 15:46:05,421|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 15:46:05,428|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 15:46:05,429|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 15:46:05,429|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 15:46:05,496|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 15:46:05,496|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 880 ms
2020-02-22 15:46:05,624|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 15:46:05,730|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 15:46:06,043|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 15:46:06,043|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 15:46:06,048|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 15:46:06,048|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 15:46:06,049|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 15:46:06,053|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 15:46:06,053|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 15:46:06,053|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 15:46:06,053|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 15:46:06,054|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 15:46:06,054|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 15:46:06,054|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 15:46:06,054|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 15:46:06,054|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 15:46:06,054|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 15:46:06,054|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 15:46:06,054|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 15:46:06,055|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 15:46:06,055|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 15:46:06,055|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 15:46:06,055|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 15:46:06,055|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 15:46:06,228|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 15:46:06,472|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 15:46:06,473|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 15:46:06,480|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 15:46:06,480|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 15:46:06,481|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 15:46:06,482|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 15:46:06,482|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 15:46:06,482|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 15:46:06,482|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@64502326
2020-02-22 15:46:06,574|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 15:46:06,574|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 15:46:06,579|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 15:46:06,595|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 15:46:06,598|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.493 seconds (JVM running for 3.032)
2020-02-22 15:46:20,017|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 15:46:20,017|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 15:46:20,017|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 15:46:20,017|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 15:46:20,017|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 15:46:20,018|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 15:46:20,018|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 15:46:20,018|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 15:46:20,018|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 15:46:20,020|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 15:46:23,840|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 18000 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 15:46:23,875|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 15:46:24,510|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 15:46:24,524|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 15:46:24,733|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 15:46:24,740|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 15:46:24,740|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 15:46:24,741|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 15:46:24,819|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 15:46:24,819|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 908 ms
2020-02-22 15:46:24,946|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 15:46:25,051|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 15:46:25,355|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 15:46:25,356|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 15:46:25,361|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 15:46:25,361|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 15:46:25,362|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 15:46:25,366|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 15:46:25,366|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 15:46:25,366|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 15:46:25,366|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 15:46:25,367|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 15:46:25,367|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 15:46:25,367|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 15:46:25,367|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 15:46:25,367|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 15:46:25,367|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 15:46:25,367|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 15:46:25,368|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 15:46:25,368|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 15:46:25,368|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 15:46:25,368|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 15:46:25,368|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 15:46:25,368|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 15:46:25,542|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 15:46:25,783|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 15:46:25,784|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 15:46:25,791|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 15:46:25,792|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 15:46:25,792|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 15:46:25,793|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 15:46:25,793|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 15:46:25,793|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 15:46:25,793|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@43471a7e
2020-02-22 15:46:25,885|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 15:46:25,886|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 15:46:25,891|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 15:46:25,908|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 15:46:25,911|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.511 seconds (JVM running for 3.071)
2020-02-22 15:46:29,455|INFO |http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-22 15:46:29,455|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)
Initializing Servlet 'dispatcherServlet'
2020-02-22 15:46:29,470|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)
Completed initialization in 15 ms
2020-02-22 15:47:09,775|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 15:47:09,775|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 15:47:09,775|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 15:47:09,775|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 15:47:09,776|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 15:47:09,776|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 15:47:09,777|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 15:47:09,777|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 15:47:09,777|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 15:47:09,780|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 15:47:12,066|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 2828 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 15:47:12,069|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 15:47:12,723|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 15:47:12,736|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 15:47:12,945|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 15:47:12,952|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 15:47:12,953|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 15:47:12,953|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 15:47:13,028|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 15:47:13,028|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 895 ms
2020-02-22 15:47:13,153|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 15:47:13,254|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 15:47:13,557|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 15:47:13,557|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 15:47:13,562|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 15:47:13,562|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 15:47:13,563|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 15:47:13,567|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 15:47:13,567|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 15:47:13,567|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 15:47:13,568|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 15:47:13,568|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 15:47:13,568|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 15:47:13,568|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 15:47:13,568|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 15:47:13,568|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 15:47:13,568|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 15:47:13,569|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 15:47:13,569|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 15:47:13,569|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 15:47:13,569|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 15:47:13,569|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 15:47:13,569|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 15:47:13,569|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 15:47:13,740|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 15:47:13,979|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 15:47:13,980|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 15:47:13,987|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 15:47:13,987|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 15:47:13,988|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 15:47:13,989|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 15:47:13,989|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 15:47:13,989|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 15:47:13,989|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@42ea7565
2020-02-22 15:47:14,080|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 15:47:14,080|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 15:47:14,085|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 15:47:14,103|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 15:47:14,105|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.475 seconds (JVM running for 2.991)
2020-02-22 15:47:18,451|INFO |http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-22 15:47:18,451|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)
Initializing Servlet 'dispatcherServlet'
2020-02-22 15:47:18,465|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)
Completed initialization in 14 ms
2020-02-22 15:48:06,287|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 15:48:06,287|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 15:48:06,287|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 15:48:06,287|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 15:48:06,288|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 15:48:06,288|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 15:48:06,289|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 15:48:06,289|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 15:48:06,289|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 15:48:06,292|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 15:48:09,696|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 10320 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 15:48:09,699|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 15:48:10,391|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 15:48:10,407|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 15:48:10,623|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 15:48:10,630|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 15:48:10,630|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 15:48:10,631|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 15:48:10,699|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 15:48:10,699|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 921 ms
2020-02-22 15:48:10,830|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 15:48:10,936|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 15:48:11,268|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 15:48:11,268|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 15:48:11,273|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 15:48:11,274|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 15:48:11,274|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 15:48:11,278|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 15:48:11,279|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 15:48:11,279|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 15:48:11,279|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 15:48:11,279|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 15:48:11,279|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 15:48:11,279|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 15:48:11,279|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 15:48:11,280|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 15:48:11,280|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 15:48:11,280|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 15:48:11,280|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 15:48:11,280|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 15:48:11,280|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 15:48:11,280|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 15:48:11,280|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 15:48:11,280|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 15:48:11,455|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 15:48:11,698|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 15:48:11,700|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 15:48:11,707|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 15:48:11,707|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 15:48:11,707|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 15:48:11,708|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 15:48:11,708|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 15:48:11,708|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 15:48:11,708|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@2db6d68d
2020-02-22 15:48:11,797|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 15:48:11,797|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 15:48:11,802|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 15:48:11,820|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 15:48:11,823|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.556 seconds (JVM running for 3.08)
2020-02-22 15:48:17,624|INFO |http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-22 15:48:17,624|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)
Initializing Servlet 'dispatcherServlet'
2020-02-22 15:48:17,639|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)
Completed initialization in 15 ms
2020-02-22 15:49:33,832|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 15:49:33,832|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 15:49:33,832|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 15:49:33,832|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 15:49:33,832|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 15:49:33,833|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 15:49:33,833|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 15:49:33,833|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 15:49:33,833|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 15:49:33,836|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 15:49:37,833|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 23416 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 15:49:37,836|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 15:49:38,548|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 15:49:38,561|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 15:49:38,785|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 15:49:38,792|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 15:49:38,793|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 15:49:38,793|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 15:49:38,862|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 15:49:38,863|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 957 ms
2020-02-22 15:49:39,002|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 15:49:39,110|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 15:49:39,420|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 15:49:39,421|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 15:49:39,426|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 15:49:39,426|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 15:49:39,426|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 15:49:39,431|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 15:49:39,432|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 15:49:39,432|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 15:49:39,432|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 15:49:39,432|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 15:49:39,432|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 15:49:39,432|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 15:49:39,432|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 15:49:39,432|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 15:49:39,433|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 15:49:39,433|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 15:49:39,433|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 15:49:39,433|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 15:49:39,433|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 15:49:39,433|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 15:49:39,433|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 15:49:39,433|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 15:49:39,615|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 15:49:39,866|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 15:49:39,868|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 15:49:39,875|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 15:49:39,875|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 15:49:39,876|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 15:49:39,876|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 15:49:39,877|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 15:49:39,877|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 15:49:39,877|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@4293e066
2020-02-22 15:49:39,976|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 15:49:39,976|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 15:49:39,982|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 15:49:40,000|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 15:49:40,002|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.621 seconds (JVM running for 3.162)
2020-02-22 15:49:43,855|INFO |http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-22 15:49:43,856|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)
Initializing Servlet 'dispatcherServlet'
2020-02-22 15:49:43,870|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)
Completed initialization in 14 ms
2020-02-22 15:50:11,337|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 15:50:11,337|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 15:50:11,337|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 15:50:11,337|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 15:50:11,337|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 15:50:11,338|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 15:50:11,338|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 15:50:11,338|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 15:50:11,338|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 15:50:11,343|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 15:50:13,676|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 14772 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 15:50:13,679|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 15:50:14,344|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 15:50:14,358|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 15:50:14,573|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 15:50:14,580|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 15:50:14,581|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 15:50:14,581|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 15:50:14,657|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 15:50:14,657|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 912 ms
2020-02-22 15:50:14,789|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 15:50:14,896|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 15:50:15,203|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 15:50:15,204|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 15:50:15,208|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 15:50:15,209|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 15:50:15,209|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 15:50:15,214|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 15:50:15,215|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 15:50:15,215|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 15:50:15,215|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 15:50:15,215|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 15:50:15,215|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 15:50:15,215|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 15:50:15,216|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 15:50:15,216|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 15:50:15,216|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 15:50:15,216|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 15:50:15,216|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 15:50:15,216|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 15:50:15,216|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 15:50:15,216|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 15:50:15,216|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 15:50:15,217|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 15:50:15,399|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 15:50:15,649|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 15:50:15,650|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 15:50:15,657|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 15:50:15,658|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 15:50:15,658|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 15:50:15,659|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 15:50:15,659|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 15:50:15,659|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 15:50:15,659|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@52d3fafd
2020-02-22 15:50:15,754|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 15:50:15,754|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 15:50:15,759|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 15:50:15,777|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 15:50:15,780|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.552 seconds (JVM running for 3.079)
2020-02-22 15:50:20,119|INFO |http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-22 15:50:20,119|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)
Initializing Servlet 'dispatcherServlet'
2020-02-22 15:50:20,133|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)
Completed initialization in 14 ms
2020-02-22 15:51:10,437|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 15:51:10,437|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 15:51:10,437|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 15:51:10,437|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 15:51:10,437|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 15:51:10,438|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 15:51:10,438|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 15:51:10,438|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 15:51:10,438|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 15:51:10,441|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 15:51:12,761|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 16520 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 15:51:12,764|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 15:51:13,414|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 15:51:13,428|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 15:51:13,644|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 15:51:13,652|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 15:51:13,652|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 15:51:13,652|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 15:51:13,728|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 15:51:13,728|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 901 ms
2020-02-22 15:51:13,854|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 15:51:13,957|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 15:51:14,268|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 15:51:14,268|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 15:51:14,273|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 15:51:14,274|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 15:51:14,274|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 15:51:14,279|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 15:51:14,279|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 15:51:14,279|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 15:51:14,280|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 15:51:14,280|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 15:51:14,280|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 15:51:14,280|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 15:51:14,280|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 15:51:14,280|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 15:51:14,280|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 15:51:14,281|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 15:51:14,281|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 15:51:14,281|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 15:51:14,281|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 15:51:14,281|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 15:51:14,281|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 15:51:14,281|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 15:51:14,467|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 15:51:14,720|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 15:51:14,721|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 15:51:14,728|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 15:51:14,729|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 15:51:14,729|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 15:51:14,730|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 15:51:14,730|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 15:51:14,730|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 15:51:14,730|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@ea7a4c3
2020-02-22 15:51:14,827|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 15:51:14,827|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 15:51:14,832|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 15:51:14,851|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 15:51:14,853|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.534 seconds (JVM running for 3.054)
2020-02-22 15:51:20,234|INFO |http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-22 15:51:20,235|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)
Initializing Servlet 'dispatcherServlet'
2020-02-22 15:51:20,249|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)
Completed initialization in 14 ms
2020-02-22 15:52:56,111|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 15:52:56,111|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 15:52:56,111|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 15:52:56,111|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 15:52:56,111|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 15:52:56,112|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 15:52:56,112|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 15:52:56,112|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 15:52:56,112|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 15:52:56,115|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 15:52:58,445|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 12340 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 15:52:58,448|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 15:52:59,109|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 15:52:59,122|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 15:52:59,341|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 15:52:59,357|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 15:52:59,358|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 15:52:59,358|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 15:52:59,429|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 15:52:59,429|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 914 ms
2020-02-22 15:52:59,564|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 15:52:59,669|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 15:52:59,973|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 15:52:59,974|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 15:52:59,978|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 15:52:59,979|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 15:52:59,979|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 15:52:59,983|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 15:52:59,984|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 15:52:59,984|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 15:52:59,984|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 15:52:59,985|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 15:52:59,985|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 15:52:59,985|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 15:52:59,985|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 15:52:59,985|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 15:52:59,985|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 15:52:59,985|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 15:52:59,985|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 15:52:59,986|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 15:52:59,986|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 15:52:59,986|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 15:52:59,986|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 15:52:59,986|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 15:53:00,162|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 15:53:00,409|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 15:53:00,411|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 15:53:00,418|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 15:53:00,418|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 15:53:00,419|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 15:53:00,419|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 15:53:00,419|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 15:53:00,419|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 15:53:00,419|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@5934153e
2020-02-22 15:53:00,512|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 15:53:00,512|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 15:53:00,517|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 15:53:00,535|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 15:53:00,537|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.525 seconds (JVM running for 3.084)
2020-02-22 15:53:06,498|INFO |http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-22 15:53:06,498|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)
Initializing Servlet 'dispatcherServlet'
2020-02-22 15:53:06,513|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)
Completed initialization in 15 ms
2020-02-22 15:54:10,872|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 15:54:10,873|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 15:54:10,873|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 15:54:10,873|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 15:54:10,873|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 15:54:10,874|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 15:54:10,874|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 15:54:10,874|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 15:54:10,874|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 15:54:10,877|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 15:54:13,296|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 17140 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 15:54:13,299|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 15:54:14,010|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 15:54:14,025|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 15:54:14,243|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 15:54:14,250|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 15:54:14,251|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 15:54:14,251|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 15:54:14,317|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 15:54:14,318|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 927 ms
2020-02-22 15:54:14,446|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 15:54:14,550|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 15:54:14,884|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 15:54:14,884|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 15:54:14,889|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 15:54:14,889|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 15:54:14,890|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 15:54:14,894|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 15:54:14,895|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 15:54:14,895|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 15:54:14,895|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 15:54:14,895|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 15:54:14,895|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 15:54:14,895|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 15:54:14,895|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 15:54:14,895|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 15:54:14,896|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 15:54:14,896|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 15:54:14,896|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 15:54:14,896|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 15:54:14,896|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 15:54:14,896|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 15:54:14,896|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 15:54:14,896|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 15:54:15,070|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 15:54:15,310|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 15:54:15,312|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 15:54:15,318|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 15:54:15,318|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 15:54:15,319|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 15:54:15,319|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 15:54:15,319|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 15:54:15,319|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 15:54:15,320|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@60f77af
2020-02-22 15:54:15,409|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 15:54:15,410|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 15:54:15,415|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 15:54:15,432|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 15:54:15,435|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.597 seconds (JVM running for 3.137)
2020-02-22 15:54:19,013|INFO |http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-22 15:54:19,013|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)
Initializing Servlet 'dispatcherServlet'
2020-02-22 15:54:19,028|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)
Completed initialization in 15 ms
2020-02-22 15:55:21,061|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 15:55:21,062|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 15:55:21,062|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 15:55:21,062|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 15:55:21,062|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 15:55:21,063|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 15:55:21,063|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 15:55:21,063|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 15:55:21,063|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 15:55:21,069|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 15:55:23,730|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 24880 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 15:55:23,732|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 15:55:24,391|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 15:55:24,404|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 15:55:24,619|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 15:55:24,626|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 15:55:24,626|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 15:55:24,627|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 15:55:24,693|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 15:55:24,694|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 890 ms
2020-02-22 15:55:24,818|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 15:55:24,931|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 15:55:25,239|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 15:55:25,239|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 15:55:25,244|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 15:55:25,245|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 15:55:25,245|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 15:55:25,249|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 15:55:25,250|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 15:55:25,250|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 15:55:25,250|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 15:55:25,251|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 15:55:25,251|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 15:55:25,251|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 15:55:25,251|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 15:55:25,251|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 15:55:25,251|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 15:55:25,251|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 15:55:25,252|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 15:55:25,252|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 15:55:25,252|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 15:55:25,252|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 15:55:25,252|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 15:55:25,252|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 15:55:25,421|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 15:55:25,674|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 15:55:25,676|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 15:55:25,683|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 15:55:25,684|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 15:55:25,684|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 15:55:25,685|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 15:55:25,685|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 15:55:25,685|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 15:55:25,685|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@31973858
2020-02-22 15:55:25,787|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 15:55:25,788|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 15:55:25,793|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 15:55:25,810|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 15:55:25,812|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.524 seconds (JVM running for 3.047)
2020-02-22 15:55:31,154|INFO |http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-22 15:55:31,154|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)
Initializing Servlet 'dispatcherServlet'
2020-02-22 15:55:31,168|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)
Completed initialization in 14 ms
2020-02-22 15:56:38,068|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 15:56:38,068|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 15:56:38,068|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 15:56:38,068|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 15:56:38,068|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 15:56:38,069|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 15:56:38,069|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 15:56:38,069|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 15:56:38,069|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 15:56:38,073|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 15:56:40,452|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 18096 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 15:56:40,455|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 15:56:41,151|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 15:56:41,164|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 15:56:41,384|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 15:56:41,390|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 15:56:41,391|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 15:56:41,391|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 15:56:41,461|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 15:56:41,462|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 922 ms
2020-02-22 15:56:41,594|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 15:56:41,705|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 15:56:42,024|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 15:56:42,025|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 15:56:42,029|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 15:56:42,030|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 15:56:42,030|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 15:56:42,034|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 15:56:42,035|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 15:56:42,035|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 15:56:42,035|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 15:56:42,036|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 15:56:42,036|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 15:56:42,036|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 15:56:42,036|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 15:56:42,036|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 15:56:42,036|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 15:56:42,036|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 15:56:42,036|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 15:56:42,037|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 15:56:42,037|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 15:56:42,037|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 15:56:42,037|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 15:56:42,037|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 15:56:42,221|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 15:56:42,469|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 15:56:42,471|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 15:56:42,478|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 15:56:42,478|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 15:56:42,479|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 15:56:42,479|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 15:56:42,480|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 15:56:42,480|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 15:56:42,480|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@6d672bd4
2020-02-22 15:56:42,575|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 15:56:42,575|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 15:56:42,580|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 15:56:42,607|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 15:56:42,610|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.637 seconds (JVM running for 3.168)
2020-02-22 15:56:46,344|INFO |http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-22 15:56:46,344|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)
Initializing Servlet 'dispatcherServlet'
2020-02-22 15:56:46,359|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)
Completed initialization in 15 ms
2020-02-22 15:57:17,856|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 15:57:17,857|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 15:57:17,857|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 15:57:17,857|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 15:57:17,857|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 15:57:17,857|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 15:57:17,858|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 15:57:17,858|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 15:57:17,858|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 15:57:17,861|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 15:57:20,204|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 18496 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 15:57:20,207|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 15:57:20,892|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 15:57:20,906|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 15:57:21,123|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 15:57:21,130|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 15:57:21,131|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 15:57:21,131|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 15:57:21,199|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 15:57:21,199|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 908 ms
2020-02-22 15:57:21,326|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 15:57:21,456|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 15:57:21,762|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 15:57:21,763|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 15:57:21,768|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 15:57:21,769|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 15:57:21,769|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 15:57:21,773|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 15:57:21,774|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 15:57:21,774|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 15:57:21,774|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 15:57:21,774|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 15:57:21,774|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 15:57:21,775|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 15:57:21,775|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 15:57:21,775|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 15:57:21,775|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 15:57:21,775|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 15:57:21,775|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 15:57:21,775|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 15:57:21,775|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 15:57:21,775|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 15:57:21,776|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 15:57:21,776|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 15:57:21,952|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 15:57:22,201|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 15:57:22,202|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 15:57:22,209|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 15:57:22,209|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 15:57:22,210|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 15:57:22,211|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 15:57:22,211|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 15:57:22,211|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 15:57:22,211|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@62b57479
2020-02-22 15:57:22,310|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 15:57:22,310|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 15:57:22,315|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 15:57:22,332|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 15:57:22,335|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.585 seconds (JVM running for 3.126)
2020-02-22 15:57:27,331|INFO |http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-22 15:57:27,331|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)
Initializing Servlet 'dispatcherServlet'
2020-02-22 15:57:27,345|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)
Completed initialization in 14 ms
2020-02-22 15:57:27,462|DEBUG|http-nio-8085-exec-1|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==>  Preparing: SELECT id,name,password,create_time,coin,type,time,update_time,status FROM core_player WHERE id=? 
2020-02-22 15:57:27,480|DEBUG|http-nio-8085-exec-1|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==> Parameters: 2(Integer)
2020-02-22 15:57:27,502|DEBUG|http-nio-8085-exec-1|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
<==      Total: 1
2020-02-22 15:57:32,118|DEBUG|http-nio-8085-exec-2|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==>  Preparing: SELECT id,name,password,create_time,coin,type,time,update_time,status FROM core_player WHERE id=? 
2020-02-22 15:57:32,118|DEBUG|http-nio-8085-exec-2|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==> Parameters: 2(Integer)
2020-02-22 15:57:32,120|DEBUG|http-nio-8085-exec-2|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
<==      Total: 1
2020-02-22 15:57:40,053|DEBUG|http-nio-8085-exec-3|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==>  Preparing: SELECT id,name,password,create_time,coin,type,time,update_time,status FROM core_player WHERE id=? 
2020-02-22 15:57:40,053|DEBUG|http-nio-8085-exec-3|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==> Parameters: 2(Integer)
2020-02-22 15:57:40,054|DEBUG|http-nio-8085-exec-3|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
<==      Total: 1
2020-02-22 15:57:40,677|DEBUG|http-nio-8085-exec-4|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==>  Preparing: SELECT id,name,password,create_time,coin,type,time,update_time,status FROM core_player WHERE id=? 
2020-02-22 15:57:40,678|DEBUG|http-nio-8085-exec-4|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==> Parameters: 2(Integer)
2020-02-22 15:57:40,679|DEBUG|http-nio-8085-exec-4|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
<==      Total: 1
2020-02-22 16:17:26,799|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 16:17:26,799|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 16:17:26,800|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 16:17:26,800|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 16:17:26,800|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 16:17:26,800|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 16:17:26,801|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 16:17:26,801|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 16:17:26,801|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 16:17:26,806|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 16:17:29,542|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 14956 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 16:17:29,576|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 16:17:30,225|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 16:17:30,239|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 16:17:30,466|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 16:17:30,473|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 16:17:30,474|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 16:17:30,474|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 16:17:30,542|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 16:17:30,542|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 927 ms
2020-02-22 16:17:30,672|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 16:17:30,779|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 16:17:31,095|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 16:17:31,095|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 16:17:31,100|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 16:17:31,100|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 16:17:31,101|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 16:17:31,105|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 16:17:31,106|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 16:17:31,106|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 16:17:31,107|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 16:17:31,107|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 16:17:31,107|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 16:17:31,107|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 16:17:31,108|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 16:17:31,108|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 16:17:31,108|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 16:17:31,108|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 16:17:31,108|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 16:17:31,108|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 16:17:31,108|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 16:17:31,108|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 16:17:31,108|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 16:17:31,109|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 16:17:31,288|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 16:17:31,536|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 16:17:31,538|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 16:17:31,545|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 16:17:31,545|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 16:17:31,546|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 16:17:31,547|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 16:17:31,547|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 16:17:31,547|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 16:17:31,547|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@3a8cea24
2020-02-22 16:17:31,668|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 16:17:31,668|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 16:17:31,683|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 16:17:31,702|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 16:17:31,705|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.615 seconds (JVM running for 3.148)
2020-02-22 16:17:35,335|INFO |http-nio-8085-exec-2|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-22 16:17:35,335|INFO |http-nio-8085-exec-2|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)
Initializing Servlet 'dispatcherServlet'
2020-02-22 16:17:35,350|INFO |http-nio-8085-exec-2|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)
Completed initialization in 15 ms
2020-02-22 16:17:35,466|DEBUG|http-nio-8085-exec-2|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==>  Preparing: SELECT id,name,password,create_time,coin,type,time,update_time,status FROM core_player WHERE id=? 
2020-02-22 16:17:35,484|DEBUG|http-nio-8085-exec-2|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==> Parameters: 2(Integer)
2020-02-22 16:17:35,505|DEBUG|http-nio-8085-exec-2|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
<==      Total: 1
2020-02-22 16:17:40,553|DEBUG|http-nio-8085-exec-1|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==>  Preparing: SELECT id,name,password,create_time,coin,type,time,update_time,status FROM core_player WHERE id=? 
2020-02-22 16:17:40,554|DEBUG|http-nio-8085-exec-1|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==> Parameters: 1(Integer)
2020-02-22 16:17:40,556|DEBUG|http-nio-8085-exec-1|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
<==      Total: 1
2020-02-22 16:39:42,580|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 16:39:42,580|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 16:39:42,580|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 16:39:42,580|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 16:39:42,581|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 16:39:42,581|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 16:39:42,582|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 16:39:42,582|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 16:39:42,582|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 16:39:42,586|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 16:39:46,323|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 24092 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 16:39:46,328|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 16:39:47,092|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 16:39:47,106|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 16:39:47,325|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 16:39:47,332|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 16:39:47,333|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 16:39:47,333|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 16:39:47,410|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 16:39:47,411|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 1011 ms
2020-02-22 16:39:47,542|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 16:39:47,646|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 16:39:47,954|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 16:39:47,955|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 16:39:47,959|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 16:39:47,960|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 16:39:47,960|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 16:39:47,964|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 16:39:47,965|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 16:39:47,965|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 16:39:47,965|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 16:39:47,965|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 16:39:47,965|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 16:39:47,965|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 16:39:47,966|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 16:39:47,966|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 16:39:47,966|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 16:39:47,966|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 16:39:47,966|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 16:39:47,966|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 16:39:47,966|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 16:39:47,966|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 16:39:47,966|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 16:39:47,966|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 16:39:48,139|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 16:39:48,378|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 16:39:48,379|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 16:39:48,386|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 16:39:48,387|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 16:39:48,387|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 16:39:48,388|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 16:39:48,388|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 16:39:48,388|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 16:39:48,388|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@66f5a02e
2020-02-22 16:39:48,480|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 16:39:48,480|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 16:39:48,485|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 16:39:48,502|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 16:39:48,505|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.661 seconds (JVM running for 3.211)
2020-02-22 16:39:55,001|INFO |http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-22 16:39:55,001|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)
Initializing Servlet 'dispatcherServlet'
2020-02-22 16:39:55,016|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)
Completed initialization in 14 ms
2020-02-22 16:39:55,133|DEBUG|http-nio-8085-exec-1|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==>  Preparing: SELECT id,name,password,create_time,coin,type,time,update_time,status FROM core_player WHERE id=? 
2020-02-22 16:39:55,152|DEBUG|http-nio-8085-exec-1|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==> Parameters: 1(Integer)
2020-02-22 16:39:55,173|DEBUG|http-nio-8085-exec-1|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
<==      Total: 1
2020-02-22 16:39:55,175|DEBUG|http-nio-8085-exec-1|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==>  Preparing: SELECT id,name,password,create_time,coin,type,time,update_time,status FROM core_player WHERE id=? 
2020-02-22 16:39:55,175|DEBUG|http-nio-8085-exec-1|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==> Parameters: 2(Integer)
2020-02-22 16:39:55,176|DEBUG|http-nio-8085-exec-1|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
<==      Total: 1
2020-02-22 16:40:01,942|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 16:40:01,943|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 16:40:01,943|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 16:40:01,943|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 16:40:01,943|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 16:40:01,944|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 16:40:01,944|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 16:40:01,944|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 16:40:01,944|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 16:40:01,947|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 16:40:07,434|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 13544 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 16:40:07,437|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 16:40:08,088|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 16:40:08,100|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 16:40:08,314|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 16:40:08,321|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 16:40:08,321|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 16:40:08,321|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 16:40:08,388|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 16:40:08,388|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 877 ms
2020-02-22 16:40:08,514|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 16:40:08,617|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 16:40:08,920|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 16:40:08,920|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 16:40:08,925|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 16:40:08,926|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 16:40:08,926|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 16:40:08,930|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 16:40:08,931|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 16:40:08,931|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 16:40:08,931|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 16:40:08,931|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 16:40:08,931|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 16:40:08,931|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 16:40:08,931|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 16:40:08,932|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 16:40:08,932|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 16:40:08,932|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 16:40:08,932|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 16:40:08,932|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 16:40:08,932|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 16:40:08,932|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 16:40:08,932|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 16:40:08,932|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 16:40:09,101|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 16:40:09,348|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 16:40:09,350|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 16:40:09,357|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 16:40:09,357|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 16:40:09,358|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 16:40:09,358|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 16:40:09,358|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 16:40:09,358|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 16:40:09,359|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@38d80d65
2020-02-22 16:40:09,458|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 16:40:09,458|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 16:40:09,463|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 16:40:09,480|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 16:40:09,482|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.484 seconds (JVM running for 3.033)
2020-02-22 16:40:14,744|INFO |http-nio-8085-exec-2|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-22 16:40:14,744|INFO |http-nio-8085-exec-2|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)
Initializing Servlet 'dispatcherServlet'
2020-02-22 16:40:14,758|INFO |http-nio-8085-exec-2|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)
Completed initialization in 14 ms
2020-02-22 16:40:14,877|DEBUG|http-nio-8085-exec-2|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==>  Preparing: SELECT id,name,password,create_time,coin,type,time,update_time,status FROM core_player WHERE id=? 
2020-02-22 16:40:14,896|DEBUG|http-nio-8085-exec-2|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==> Parameters: 1(Integer)
2020-02-22 16:40:14,917|DEBUG|http-nio-8085-exec-2|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
<==      Total: 1
2020-02-22 16:40:14,919|DEBUG|http-nio-8085-exec-2|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==>  Preparing: SELECT id,name,password,create_time,coin,type,time,update_time,status FROM core_player WHERE id=? 
2020-02-22 16:40:14,919|DEBUG|http-nio-8085-exec-2|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==> Parameters: 1(Integer)
2020-02-22 16:40:14,920|DEBUG|http-nio-8085-exec-2|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
<==      Total: 1
2020-02-22 16:54:48,819|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 16:54:48,819|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 16:54:48,819|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 16:54:48,819|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 16:54:48,820|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 16:54:48,820|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 16:54:48,821|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 16:54:48,821|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 16:54:48,821|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 16:54:48,824|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 16:54:52,558|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 9352 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 16:54:52,561|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 16:54:53,261|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 16:54:53,274|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 16:54:53,495|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 16:54:53,502|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 16:54:53,502|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 16:54:53,502|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 16:54:53,570|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 16:54:53,570|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 928 ms
2020-02-22 16:54:53,698|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 16:54:53,801|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 16:54:54,101|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 16:54:54,102|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 16:54:54,107|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 16:54:54,107|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 16:54:54,107|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 16:54:54,111|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 16:54:54,112|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 16:54:54,112|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 16:54:54,112|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 16:54:54,112|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 16:54:54,112|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 16:54:54,112|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 16:54:54,113|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 16:54:54,113|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 16:54:54,113|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 16:54:54,113|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 16:54:54,113|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 16:54:54,113|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 16:54:54,113|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 16:54:54,113|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 16:54:54,113|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 16:54:54,114|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 16:54:54,285|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 16:54:54,527|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 16:54:54,529|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 16:54:54,535|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 16:54:54,536|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 16:54:54,536|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 16:54:54,537|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 16:54:54,537|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 16:54:54,537|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 16:54:54,537|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@477021ee
2020-02-22 16:54:54,629|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 16:54:54,629|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 16:54:54,641|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 16:54:54,658|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 16:54:54,661|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.557 seconds (JVM running for 3.088)
2020-02-22 16:54:59,196|INFO |http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-22 16:54:59,196|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)
Initializing Servlet 'dispatcherServlet'
2020-02-22 16:54:59,210|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)
Completed initialization in 13 ms
2020-02-22 16:54:59,328|DEBUG|http-nio-8085-exec-1|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==>  Preparing: SELECT id,name,password,create_time,coin,type,time,update_time,status FROM core_player WHERE id=? 
2020-02-22 16:54:59,346|DEBUG|http-nio-8085-exec-1|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==> Parameters: 1(Integer)
2020-02-22 16:54:59,368|DEBUG|http-nio-8085-exec-1|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
<==      Total: 1
2020-02-22 16:54:59,370|DEBUG|http-nio-8085-exec-1|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==>  Preparing: SELECT id,name,password,create_time,coin,type,time,update_time,status FROM core_player WHERE id=? 
2020-02-22 16:54:59,370|DEBUG|http-nio-8085-exec-1|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==> Parameters: 1(Integer)
2020-02-22 16:54:59,371|DEBUG|http-nio-8085-exec-1|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
<==      Total: 1
2020-02-22 16:55:07,407|DEBUG|http-nio-8085-exec-2|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==>  Preparing: SELECT id,name,password,create_time,coin,type,time,update_time,status FROM core_player WHERE id=? 
2020-02-22 16:55:07,408|DEBUG|http-nio-8085-exec-2|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==> Parameters: 1(Integer)
2020-02-22 16:55:07,410|DEBUG|http-nio-8085-exec-2|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
<==      Total: 1
2020-02-22 16:55:07,410|DEBUG|http-nio-8085-exec-2|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==>  Preparing: SELECT id,name,password,create_time,coin,type,time,update_time,status FROM core_player WHERE id=? 
2020-02-22 16:55:07,411|DEBUG|http-nio-8085-exec-2|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==> Parameters: 1(Integer)
2020-02-22 16:55:07,412|DEBUG|http-nio-8085-exec-2|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
<==      Total: 1
2020-02-22 16:55:14,158|DEBUG|http-nio-8085-exec-3|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==>  Preparing: SELECT id,name,password,create_time,coin,type,time,update_time,status FROM core_player WHERE id=? 
2020-02-22 16:55:14,158|DEBUG|http-nio-8085-exec-3|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==> Parameters: 1(Integer)
2020-02-22 16:55:14,160|DEBUG|http-nio-8085-exec-3|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
<==      Total: 1
2020-02-22 16:55:14,160|DEBUG|http-nio-8085-exec-3|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==>  Preparing: SELECT id,name,password,create_time,coin,type,time,update_time,status FROM core_player WHERE id=? 
2020-02-22 16:55:14,161|DEBUG|http-nio-8085-exec-3|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==> Parameters: 1(Integer)
2020-02-22 16:55:14,163|DEBUG|http-nio-8085-exec-3|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
<==      Total: 1
2020-02-22 17:03:32,036|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 17:03:32,036|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 17:03:32,036|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 17:03:32,036|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 17:03:32,037|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 17:03:32,037|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 17:03:32,037|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 17:03:32,038|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 17:03:32,038|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 17:03:32,041|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 17:03:35,683|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 20828 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 17:03:35,686|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 17:03:36,396|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 17:03:36,411|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 17:03:36,634|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 17:03:36,641|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 17:03:36,642|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 17:03:36,642|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 17:03:36,710|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 17:03:36,710|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 943 ms
2020-02-22 17:03:36,838|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 17:03:36,942|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 17:03:37,253|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 17:03:37,254|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 17:03:37,259|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 17:03:37,259|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 17:03:37,259|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 17:03:37,264|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 17:03:37,265|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 17:03:37,265|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 17:03:37,265|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 17:03:37,265|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 17:03:37,265|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 17:03:37,265|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 17:03:37,265|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 17:03:37,266|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 17:03:37,266|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 17:03:37,266|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 17:03:37,266|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 17:03:37,266|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 17:03:37,266|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 17:03:37,266|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 17:03:37,266|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 17:03:37,266|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 17:03:37,449|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 17:03:37,703|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 17:03:37,704|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 17:03:37,712|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 17:03:37,712|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 17:03:37,713|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 17:03:37,713|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 17:03:37,714|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 17:03:37,714|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 17:03:37,714|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@43471a7e
2020-02-22 17:03:37,816|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 17:03:37,817|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 17:03:37,822|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 17:03:37,839|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 17:03:37,842|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.624 seconds (JVM running for 3.167)
2020-02-22 17:03:38,793|INFO |http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-22 17:03:38,793|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)
Initializing Servlet 'dispatcherServlet'
2020-02-22 17:03:38,807|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)
Completed initialization in 14 ms
2020-02-22 17:03:46,524|ERROR|http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)
Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'PlayerInfoMapper' available] with root cause
org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'PlayerInfoMapper' available
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:805)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1278)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:297)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1108)
	at com.zemel.framework.until.SpringUtils.getBean(SpringUtils.java:25)
	at com.zemel.note.mybatis.MybatisController.testSqlSession2(MybatisController.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-02-22 17:04:24,921|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 17:04:24,921|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 17:04:24,921|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 17:04:24,921|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 17:04:24,921|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 17:04:24,922|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 17:04:24,922|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 17:04:24,922|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 17:04:24,922|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 17:04:24,923|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 17:04:28,510|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 5600 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 17:04:28,513|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 17:04:29,172|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 17:04:29,185|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 17:04:29,392|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 17:04:29,399|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 17:04:29,400|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 17:04:29,400|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 17:04:29,476|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 17:04:29,476|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 900 ms
2020-02-22 17:04:29,601|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 17:04:29,702|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 17:04:30,005|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 17:04:30,006|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 17:04:30,011|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 17:04:30,011|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 17:04:30,011|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 17:04:30,016|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 17:04:30,016|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 17:04:30,016|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 17:04:30,016|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 17:04:30,017|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 17:04:30,017|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 17:04:30,017|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 17:04:30,017|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 17:04:30,017|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 17:04:30,017|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 17:04:30,017|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 17:04:30,017|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 17:04:30,017|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 17:04:30,018|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 17:04:30,018|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 17:04:30,018|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 17:04:30,018|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 17:04:30,190|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 17:04:30,429|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 17:04:30,431|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 17:04:30,437|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 17:04:30,437|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 17:04:30,438|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 17:04:30,439|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 17:04:30,439|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 17:04:30,439|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 17:04:30,439|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@149c39b
2020-02-22 17:04:30,530|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 17:04:30,530|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 17:04:30,535|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 17:04:30,552|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 17:04:30,554|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.488 seconds (JVM running for 3.013)
2020-02-22 17:06:09,906|INFO |http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-22 17:06:09,906|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)
Initializing Servlet 'dispatcherServlet'
2020-02-22 17:06:09,920|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)
Completed initialization in 14 ms
2020-02-22 17:06:13,646|ERROR|http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)
Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'PlayerInfoMapper' available] with root cause
org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'PlayerInfoMapper' available
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:805)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1278)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:297)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1108)
	at com.zemel.framework.until.SpringUtils.getBean(SpringUtils.java:25)
	at com.zemel.note.mybatis.MybatisController.testSqlSession2(MybatisController.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-02-22 17:06:20,365|ERROR|http-nio-8085-exec-2|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)
Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'PlayerInfoMapper' available] with root cause
org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'PlayerInfoMapper' available
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:805)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1278)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:297)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1108)
	at com.zemel.framework.until.SpringUtils.getBean(SpringUtils.java:25)
	at com.zemel.note.mybatis.MybatisController.testSqlSession2(MybatisController.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-02-22 17:06:37,573|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 17:06:37,574|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 17:06:37,574|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 17:06:37,574|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 17:06:37,574|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 17:06:37,575|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 17:06:37,575|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 17:06:37,575|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 17:06:37,575|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 17:06:37,576|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 17:06:41,485|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 25320 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 17:06:41,488|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 17:06:42,147|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 17:06:42,160|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 17:06:42,376|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 17:06:42,383|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 17:06:42,384|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 17:06:42,384|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 17:06:42,450|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 17:06:42,450|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 893 ms
2020-02-22 17:06:42,577|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 17:06:42,679|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 17:06:42,983|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 17:06:42,983|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 17:06:42,988|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 17:06:42,988|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 17:06:42,989|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 17:06:42,993|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 17:06:42,994|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 17:06:42,994|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 17:06:42,994|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 17:06:42,994|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 17:06:42,994|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 17:06:42,994|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 17:06:42,994|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 17:06:42,995|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 17:06:42,995|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 17:06:42,995|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 17:06:42,995|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 17:06:42,995|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 17:06:42,995|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 17:06:42,995|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 17:06:42,995|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 17:06:42,995|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 17:06:43,167|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 17:06:43,411|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 17:06:43,413|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 17:06:43,420|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 17:06:43,420|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 17:06:43,420|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 17:06:43,421|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 17:06:43,421|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 17:06:43,421|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 17:06:43,421|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@28279a49
2020-02-22 17:06:43,520|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 17:06:43,520|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 17:06:43,525|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 17:06:43,542|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 17:06:43,544|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.505 seconds (JVM running for 3.023)
2020-02-22 17:08:32,433|INFO |http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-22 17:08:32,434|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)
Initializing Servlet 'dispatcherServlet'
2020-02-22 17:08:32,448|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)
Completed initialization in 14 ms
2020-02-22 17:08:32,481|ERROR|http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)
Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'PlayerInfoMapper' available] with root cause
org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'PlayerInfoMapper' available
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:805)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1278)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:297)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1108)
	at com.zemel.framework.until.SpringUtils.getBean(SpringUtils.java:25)
	at com.zemel.note.mybatis.MybatisController.testSqlSession2(MybatisController.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-02-22 17:10:29,865|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 17:10:29,865|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 17:10:29,865|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 17:10:29,865|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 17:10:29,865|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 17:10:29,866|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 17:10:29,867|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 17:10:29,867|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 17:10:29,867|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 17:10:29,868|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 17:10:33,916|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 21168 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 17:10:33,946|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 17:10:34,609|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 17:10:34,622|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 17:10:34,833|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 17:10:34,840|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 17:10:34,840|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 17:10:34,841|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 17:10:34,915|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 17:10:34,915|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 929 ms
2020-02-22 17:10:35,041|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 17:10:35,144|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 17:15:01,426|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 17:15:01,427|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 17:15:01,433|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 17:15:01,434|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 17:15:01,434|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 17:15:01,440|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 17:15:01,441|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 17:15:01,441|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 17:15:01,441|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 17:15:01,441|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 17:15:01,441|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 17:15:01,442|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 17:15:01,442|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 17:15:01,442|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 17:15:01,442|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 17:15:01,442|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 17:15:01,442|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 17:15:01,443|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 17:15:01,443|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 17:15:01,443|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 17:15:01,443|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 17:15:01,443|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 17:15:05,057|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 2960 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 17:15:05,059|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 17:15:05,727|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 17:15:05,740|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 17:15:05,948|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 17:15:05,963|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 17:15:05,964|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 17:15:05,964|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 17:15:06,038|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 17:15:06,038|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 911 ms
2020-02-22 17:15:06,163|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 17:15:06,267|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 17:15:10,263|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 17:15:10,264|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 17:15:10,271|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 17:15:10,272|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 17:15:10,272|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 17:15:10,277|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 17:15:10,277|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 17:15:10,277|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 17:15:10,278|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 17:15:10,278|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 17:15:10,278|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 17:15:10,278|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 17:15:10,278|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 17:15:10,278|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 17:15:10,278|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 17:15:10,279|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 17:15:10,279|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 17:15:10,279|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 17:15:10,279|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 17:15:10,279|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 17:15:10,279|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 17:15:10,279|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 17:15:10,454|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 17:15:10,705|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 17:15:10,706|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 17:15:10,714|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 17:15:10,714|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 17:15:10,715|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 17:15:10,715|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 17:15:10,715|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 17:15:10,716|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 17:15:10,716|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@30c19bff
2020-02-22 17:15:10,813|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 17:15:10,813|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 17:15:10,818|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 17:15:10,837|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 17:15:10,839|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 6.219 seconds (JVM running for 6.754)
2020-02-22 17:15:15,898|INFO |http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-22 17:15:15,898|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)
Initializing Servlet 'dispatcherServlet'
2020-02-22 17:15:15,914|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)
Completed initialization in 16 ms
2020-02-22 17:15:15,947|ERROR|http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)
Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type 'org.mybatis.spring.mapper.MapperFactoryBean' available: expected single matching bean but found 3: &playerInfoMapper,&roomInfoMapper,&serverClusterMapping] with root cause
org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type 'org.mybatis.spring.mapper.MapperFactoryBean' available: expected single matching bean but found 3: &playerInfoMapper,&roomInfoMapper,&serverClusterMapping
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveNamedBean(DefaultListableBeanFactory.java:1180)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveBean(DefaultListableBeanFactory.java:416)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:349)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:342)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1126)
	at com.zemel.framework.until.SpringUtils.getBean(SpringUtils.java:30)
	at com.zemel.note.mybatis.MybatisController.testSqlSession2(MybatisController.java:34)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-02-22 17:16:08,979|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 17:16:08,980|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 17:16:08,980|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 17:16:08,980|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 17:16:08,980|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 17:16:08,981|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 17:16:08,981|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 17:16:08,982|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 17:16:08,982|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 17:16:08,983|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 17:16:12,549|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 18512 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 17:16:12,582|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 17:16:13,197|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 17:16:13,211|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 17:16:13,421|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 17:16:13,428|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 17:16:13,428|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 17:16:13,429|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 17:16:13,504|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 17:16:13,504|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 889 ms
2020-02-22 17:16:13,630|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 17:16:13,734|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 17:16:14,040|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 17:16:14,041|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 17:16:14,045|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 17:16:14,046|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 17:16:14,046|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 17:16:14,050|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 17:16:14,051|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 17:16:14,051|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 17:16:14,051|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 17:16:14,051|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 17:16:14,051|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 17:16:14,051|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 17:16:14,052|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 17:16:14,052|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 17:16:14,052|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 17:16:14,052|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 17:16:14,052|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 17:16:14,052|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 17:16:14,052|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 17:16:14,052|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 17:16:14,052|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 17:16:14,052|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 17:16:14,231|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 17:16:14,472|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 17:16:14,474|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 17:16:14,481|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 17:16:14,481|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 17:16:14,482|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 17:16:14,482|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 17:16:14,482|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 17:16:14,482|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 17:16:14,483|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@7d42404e
2020-02-22 17:16:14,574|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 17:16:14,575|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 17:16:14,580|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 17:16:14,597|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 17:16:14,600|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.495 seconds (JVM running for 3.022)
2020-02-22 17:16:22,283|INFO |http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-22 17:16:22,283|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)
Initializing Servlet 'dispatcherServlet'
2020-02-22 17:16:22,297|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)
Completed initialization in 14 ms
2020-02-22 17:29:11,201|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 17:29:11,201|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 17:29:11,201|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 17:29:11,201|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 17:29:11,201|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 17:29:11,203|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 17:29:11,203|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 17:29:11,203|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 17:29:11,203|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 17:29:11,207|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 17:29:15,253|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 9528 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 17:29:15,293|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 17:29:15,911|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 17:29:15,924|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 17:29:16,145|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 17:29:16,151|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 17:29:16,152|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 17:29:16,152|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 17:29:16,218|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 17:29:16,218|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 887 ms
2020-02-22 17:29:16,347|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 17:29:16,451|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 17:29:16,764|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 17:29:16,764|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 17:29:16,769|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 17:29:16,770|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 17:29:16,770|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 17:29:16,774|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 17:29:16,775|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 17:29:16,775|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 17:29:16,775|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 17:29:16,775|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 17:29:16,775|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 17:29:16,776|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 17:29:16,776|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 17:29:16,776|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 17:29:16,776|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 17:29:16,776|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 17:29:16,776|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 17:29:16,776|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 17:29:16,776|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 17:29:16,776|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 17:29:16,777|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 17:29:16,777|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 17:29:16,954|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 17:29:17,203|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 17:29:17,205|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 17:29:17,212|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 17:29:17,213|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 17:29:17,213|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 17:29:17,214|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 17:29:17,214|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 17:29:17,214|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 17:29:17,214|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@7b2bf745
2020-02-22 17:29:17,316|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 17:29:17,316|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 17:29:17,321|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 17:29:17,337|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 17:29:17,340|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.539 seconds (JVM running for 3.074)
2020-02-22 17:29:20,638|INFO |http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-22 17:29:20,638|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)
Initializing Servlet 'dispatcherServlet'
2020-02-22 17:29:20,652|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)
Completed initialization in 14 ms
2020-02-22 17:29:23,731|DEBUG|http-nio-8085-exec-1|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==>  Preparing: SELECT id,name,password,create_time,coin,type,time,update_time,status FROM core_player WHERE id=? 
2020-02-22 17:29:23,751|DEBUG|http-nio-8085-exec-1|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==> Parameters: 1(Integer)
2020-02-22 17:29:23,773|DEBUG|http-nio-8085-exec-1|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
<==      Total: 1
2020-02-22 17:29:23,775|DEBUG|http-nio-8085-exec-1|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==>  Preparing: SELECT id,name,password,create_time,coin,type,time,update_time,status FROM core_player WHERE id=? 
2020-02-22 17:29:23,775|DEBUG|http-nio-8085-exec-1|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
==> Parameters: 1(Integer)
2020-02-22 17:29:23,776|DEBUG|http-nio-8085-exec-1|Caller+0	 at org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:143)
<==      Total: 1
2020-02-22 17:30:41,847|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 17:30:41,847|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 17:30:41,848|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 17:30:41,848|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 17:30:41,848|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 17:30:41,849|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 17:30:41,849|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 17:30:41,849|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 17:30:41,849|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 17:30:41,854|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 17:30:45,550|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 14548 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 17:30:45,553|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 17:30:46,202|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 17:30:46,216|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 17:30:46,440|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 17:30:46,456|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 17:30:46,457|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 17:30:46,457|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 17:30:46,524|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 17:30:46,524|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 907 ms
2020-02-22 17:30:46,649|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 17:30:46,753|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 17:30:47,048|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 17:30:47,048|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 17:30:47,053|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 17:30:47,054|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 17:30:47,054|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 17:30:47,058|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 17:30:47,059|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 17:30:47,059|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 17:30:47,059|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 17:30:47,059|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 17:30:47,059|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 17:30:47,059|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 17:30:47,060|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 17:30:47,060|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 17:30:47,060|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 17:30:47,060|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 17:30:47,060|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 17:30:47,060|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 17:30:47,060|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 17:30:47,060|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 17:30:47,060|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 17:30:47,060|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 17:30:47,231|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 17:30:47,484|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 17:30:47,486|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 17:30:47,493|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 17:30:47,493|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 17:30:47,494|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 17:30:47,494|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 17:30:47,494|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 17:30:47,494|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 17:30:47,494|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@3b481bf5
2020-02-22 17:30:47,587|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 17:30:47,587|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 17:30:47,592|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 17:30:47,609|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 17:30:47,612|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.501 seconds (JVM running for 3.029)
2020-02-22 17:30:51,560|INFO |http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-22 17:30:51,560|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)
Initializing Servlet 'dispatcherServlet'
2020-02-22 17:30:51,574|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)
Completed initialization in 13 ms
2020-02-22 17:30:51,615|ERROR|http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)
Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: java.lang.IllegalArgumentException: Mapped Statements collection does not contain value for select * from core_player where id = 1
### Cause: java.lang.IllegalArgumentException: Mapped Statements collection does not contain value for select * from core_player where id = 1] with root cause
java.lang.IllegalArgumentException: Mapped Statements collection does not contain value for select * from core_player where id = 1
	at org.apache.ibatis.session.Configuration$StrictMap.get(Configuration.java:964)
	at org.apache.ibatis.session.Configuration.getMappedStatement(Configuration.java:755)
	at org.apache.ibatis.session.Configuration.getMappedStatement(Configuration.java:748)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:146)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:135)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at com.sun.proxy.$Proxy64.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:215)
	at com.zemel.note.mybatis.MybatisController.testSqlSession2(MybatisController.java:37)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-02-22 17:31:26,304|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 17:31:26,304|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 17:31:26,304|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 17:31:26,304|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 17:31:26,304|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 17:31:26,305|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 17:31:26,305|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 17:31:26,306|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 17:31:26,306|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 17:31:26,306|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-22 17:31:29,989|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 21676 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-22 17:31:30,026|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-22 17:31:30,681|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-22 17:31:30,694|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-22 17:31:30,922|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-22 17:31:30,929|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-22 17:31:30,929|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-22 17:31:30,929|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-22 17:31:30,998|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-22 17:31:30,998|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 936 ms
2020-02-22 17:31:31,127|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-22 17:31:31,230|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-22 17:31:31,526|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-22 17:31:31,526|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-22 17:31:31,531|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-22 17:31:31,532|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-22 17:31:31,532|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-22 17:31:31,536|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-22 17:31:31,537|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-22 17:31:31,537|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-22 17:31:31,537|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-22 17:31:31,537|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 17:31:31,537|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-22 17:31:31,537|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-22 17:31:31,538|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-22 17:31:31,538|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-22 17:31:31,538|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
TestBean setBeanName
2020-02-22 17:31:31,538|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
TestBean setBeanFactory
2020-02-22 17:31:31,538|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
TestBean setApplicationContext
2020-02-22 17:31:31,538|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-22 17:31:31,538|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean init
2020-02-22 17:31:31,538|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
TestBean afterPropertiesSet
2020-02-22 17:31:31,538|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-22 17:31:31,538|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-22 17:31:31,711|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-22 17:31:31,951|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-22 17:31:31,953|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-22 17:31:31,959|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-22 17:31:31,959|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-22 17:31:31,960|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-22 17:31:31,961|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-22 17:31:31,961|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-22 17:31:31,961|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-22 17:31:31,961|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@4e22368c
2020-02-22 17:31:32,053|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-22 17:31:32,053|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-22 17:31:32,058|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-22 17:31:32,083|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-22 17:31:32,085|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.545 seconds (JVM running for 3.058)
2020-02-22 17:31:34,504|INFO |http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-02-22 17:31:34,504|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:525)
Initializing Servlet 'dispatcherServlet'
2020-02-22 17:31:34,518|INFO |http-nio-8085-exec-1|Caller+0	 at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:547)
Completed initialization in 14 ms
2020-02-22 17:31:34,557|ERROR|http-nio-8085-exec-1|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:175)
Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: java.lang.IllegalArgumentException: Mapped Statements collection does not contain value for select * 
### Cause: java.lang.IllegalArgumentException: Mapped Statements collection does not contain value for select * ] with root cause
java.lang.IllegalArgumentException: Mapped Statements collection does not contain value for select * 
	at org.apache.ibatis.session.Configuration$StrictMap.get(Configuration.java:964)
	at org.apache.ibatis.session.Configuration.getMappedStatement(Configuration.java:755)
	at org.apache.ibatis.session.Configuration.getMappedStatement(Configuration.java:748)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:146)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:135)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at com.sun.proxy.$Proxy64.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:215)
	at com.zemel.note.mybatis.MybatisController.testSqlSession2(MybatisController.java:37)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-02-22 22:35:03,468|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 22:35:03,468|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-22 22:35:03,468|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-22 22:35:03,469|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-22 22:35:03,469|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-22 22:35:03,471|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-22 22:35:03,472|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-22 22:35:03,472|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.springPreDestory(TestBean.java:37)
@PreDestory
2020-02-22 22:35:03,472|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
TestBean destroy
2020-02-22 22:35:03,473|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
