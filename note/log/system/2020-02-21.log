2020-02-21 15:56:27,323|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 2152 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-21 15:56:27,323|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-21 15:56:28,182|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-21 15:56:28,182|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-21 15:56:28,182|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-21 15:56:28,182|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-21 15:56:28,245|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-21 15:56:28,245|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 875 ms
2020-02-21 15:56:28,307|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:18)
TestBean constrance
2020-02-21 15:56:28,307|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:23)
TestBean init
2020-02-21 15:56:28,385|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-21 15:56:28,510|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-21 15:56:28,589|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-21 15:56:28,858|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-21 15:56:28,858|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-21 15:56:28,858|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-21 15:56:28,858|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-21 15:56:28,858|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-21 15:56:28,858|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-21 15:56:28,858|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-21 15:56:28,858|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-21 15:56:28,858|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@31e04b13
2020-02-21 15:56:29,029|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-21 15:56:29,029|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-21 15:56:29,029|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-21 15:56:29,045|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-21 15:56:29,045|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.219 seconds (JVM running for 3.136)
2020-02-21 16:43:24,358|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 8452 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-21 16:43:24,360|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-21 16:43:25,108|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-21 16:43:25,114|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-21 16:43:25,114|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-21 16:43:25,115|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-21 16:43:25,177|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-21 16:43:25,178|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 742 ms
2020-02-21 16:43:25,220|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:26)
TestBean constrance
2020-02-21 16:43:25,221|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:45)
setBeanName
2020-02-21 16:43:25,221|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:40)
setBeanFactory
2020-02-21 16:43:25,221|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:60)
setApplicationContext
2020-02-21 16:43:25,221|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:35)
TestBean init
2020-02-21 16:43:25,221|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:55)
afterPropertiesSet
2020-02-21 16:43:25,305|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-21 16:43:25,410|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-21 16:43:25,463|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-21 16:43:25,694|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-21 16:43:25,695|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-21 16:43:25,700|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-21 16:43:25,701|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-21 16:43:25,701|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-21 16:43:25,702|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-21 16:43:25,702|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-21 16:43:25,702|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-21 16:43:25,702|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@37864b77
2020-02-21 16:43:25,858|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-21 16:43:25,859|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-21 16:43:25,863|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-21 16:43:25,878|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-21 16:43:25,881|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 1.872 seconds (JVM running for 2.341)
2020-02-21 16:43:46,429|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 5348 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-21 16:43:46,432|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-21 16:43:47,252|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-21 16:43:47,260|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-21 16:43:47,260|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-21 16:43:47,261|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-21 16:43:47,333|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-21 16:43:47,334|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 846 ms
2020-02-21 16:43:47,392|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:26)
TestBean constrance
2020-02-21 16:43:55,573|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:45)
setBeanName
2020-02-21 16:43:55,573|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:40)
setBeanFactory
2020-02-21 16:43:55,573|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:60)
setApplicationContext
2020-02-21 16:43:55,573|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:35)
TestBean init
2020-02-21 16:43:55,574|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:55)
afterPropertiesSet
2020-02-21 16:43:55,680|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-21 16:43:55,790|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-21 16:43:55,886|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-21 16:43:56,102|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-21 16:43:56,103|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-21 16:43:56,110|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-21 16:43:56,110|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-21 16:43:56,110|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-21 16:43:56,111|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-21 16:43:56,111|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-21 16:43:56,111|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-21 16:43:56,111|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@33eb6758
2020-02-21 16:43:56,283|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-21 16:43:56,284|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-21 16:43:56,289|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-21 16:43:56,306|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-21 16:43:56,309|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 10.284 seconds (JVM running for 11.216)
2020-02-21 16:44:13,810|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 16:44:13,810|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-21 16:44:13,810|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-21 16:44:13,811|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 16:44:13,811|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-21 16:44:13,814|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-21 16:44:13,815|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-21 16:44:13,816|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:50)
destroy
2020-02-21 16:44:16,109|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 16572 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-21 16:44:16,112|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-21 16:44:16,948|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-21 16:44:16,955|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-21 16:44:16,956|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-21 16:44:16,956|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-21 16:44:17,037|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-21 16:44:17,037|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 860 ms
2020-02-21 16:44:17,086|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:26)
TestBean constrance
2020-02-21 16:44:18,427|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:45)
setBeanName
2020-02-21 16:44:28,195|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:40)
setBeanFactory
2020-02-21 16:44:28,196|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:60)
setApplicationContext
2020-02-21 16:44:28,196|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:35)
TestBean init
2020-02-21 16:44:28,196|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:55)
afterPropertiesSet
2020-02-21 16:44:28,298|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-21 16:44:28,406|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-21 16:44:28,502|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-21 16:44:28,718|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-21 16:44:28,720|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-21 16:44:28,727|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-21 16:44:28,727|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-21 16:44:28,727|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-21 16:44:28,728|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-21 16:44:28,728|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-21 16:44:28,728|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-21 16:44:28,728|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@f2a1813
2020-02-21 16:44:28,901|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-21 16:44:28,901|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-21 16:44:28,906|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-21 16:44:28,922|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-21 16:44:28,925|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 13.278 seconds (JVM running for 13.841)
2020-02-21 16:44:37,729|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 16:44:37,730|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-21 16:44:37,730|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-21 16:44:37,730|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 16:44:37,730|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-21 16:44:37,732|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-21 16:44:37,733|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-21 16:44:37,733|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:50)
destroy
2020-02-21 16:44:40,075|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 3208 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-21 16:44:40,078|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-21 16:44:40,891|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-21 16:44:40,898|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-21 16:44:40,898|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-21 16:44:40,898|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-21 16:44:40,971|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-21 16:44:40,971|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 831 ms
2020-02-21 16:44:41,028|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:26)
TestBean constrance
2020-02-21 16:44:42,009|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:45)
setBeanName
2020-02-21 16:44:43,268|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:40)
setBeanFactory
2020-02-21 16:44:52,302|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:60)
setApplicationContext
2020-02-21 16:44:52,303|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:35)
TestBean init
2020-02-21 16:44:52,304|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:55)
afterPropertiesSet
2020-02-21 16:45:28,460|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-21 16:45:28,571|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-21 16:45:28,673|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-21 16:45:28,891|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-21 16:45:28,892|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-21 16:45:28,899|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-21 16:45:28,899|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-21 16:45:28,900|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-21 16:45:28,900|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-21 16:45:28,900|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-21 16:45:28,900|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-21 16:45:28,900|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@67fa5045
2020-02-21 16:45:29,072|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-21 16:45:29,073|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-21 16:45:29,079|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-21 16:45:29,096|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-21 16:45:29,099|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 49.456 seconds (JVM running for 50.082)
2020-02-21 16:46:10,494|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 16:46:10,495|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-21 16:46:10,495|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-21 16:46:10,495|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 16:46:10,495|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-21 16:46:10,498|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-21 16:46:10,499|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-21 16:46:10,499|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:50)
destroy
2020-02-21 16:46:14,100|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 11140 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-21 16:46:14,103|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-21 16:46:14,987|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-21 16:46:14,994|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-21 16:46:14,994|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-21 16:46:14,994|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-21 16:46:15,061|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-21 16:46:15,061|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 872 ms
2020-02-21 16:46:15,109|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:26)
TestBean constrance
2020-02-21 16:46:17,527|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:45)
setBeanName
2020-02-21 16:46:17,528|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:40)
setBeanFactory
2020-02-21 16:46:17,528|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:60)
setApplicationContext
2020-02-21 16:46:17,528|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:35)
TestBean init
2020-02-21 16:46:17,528|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:55)
afterPropertiesSet
2020-02-21 16:46:17,529|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:26)
TestBean2 constrance
2020-02-21 16:46:17,529|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:45)
setBeanName
2020-02-21 16:46:17,529|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:40)
setBeanFactory
2020-02-21 16:46:17,530|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:60)
setApplicationContext
2020-02-21 16:46:17,530|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:35)
TestBean2 init
2020-02-21 16:46:17,530|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:55)
afterPropertiesSet
2020-02-21 16:46:17,629|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-21 16:46:17,743|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-21 16:46:17,807|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-21 16:46:18,083|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-21 16:46:18,085|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-21 16:46:18,091|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-21 16:46:18,092|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-21 16:46:18,092|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-21 16:46:18,093|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-21 16:46:18,093|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-21 16:46:18,093|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-21 16:46:18,093|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@1da1380b
2020-02-21 16:46:18,274|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-21 16:46:18,274|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-21 16:46:18,281|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-21 16:46:18,298|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-21 16:46:18,300|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 4.644 seconds (JVM running for 5.199)
2020-02-21 16:57:55,111|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 16:57:55,112|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-21 16:57:55,112|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-21 16:57:55,112|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 16:57:55,112|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-21 16:57:55,115|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-21 16:57:55,116|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-21 16:57:55,117|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:50)
destroy
2020-02-21 16:57:55,117|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:50)
destroy
2020-02-21 16:58:13,348|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 26220 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-21 16:58:13,351|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-21 16:58:14,252|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-21 16:58:14,259|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-21 16:58:14,260|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-21 16:58:14,260|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-21 16:58:14,340|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-21 16:58:14,340|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 919 ms
2020-02-21 16:58:14,390|WARN |main|Caller+0	 at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:558)
Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'testBean' defined in file [F:\code\Z01\server\z01\note\target\classes\com\zemel\note\spring\TestBean.class]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.zemel.note.spring.TestBean]: Constructor threw exception; nested exception is java.lang.NullPointerException
2020-02-21 16:58:14,392|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Stopping service [Tomcat]
2020-02-21 16:58:14,407|INFO |main|Caller+0	 at org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener.logMessage(ConditionEvaluationReportLoggingListener.java:136)


Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-02-21 16:58:14,416|ERROR|main|Caller+0	 at org.springframework.boot.SpringApplication.reportFailure(SpringApplication.java:826)
Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'testBean' defined in file [F:\code\Z01\server\z01\note\target\classes\com\zemel\note\spring\TestBean.class]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.zemel.note.spring.TestBean]: Constructor threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1320)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1214)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:879)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at com.zemel.note.NoteApplication.main(NoteApplication.java:14)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.zemel.note.spring.TestBean]: Constructor threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:213)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:87)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1312)
	... 17 common frames omitted
Caused by: java.lang.NullPointerException: null
	at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:200)
	... 19 common frames omitted
2020-02-21 16:59:25,845|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 24716 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-21 16:59:25,878|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-21 16:59:26,660|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-21 16:59:26,668|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-21 16:59:26,668|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-21 16:59:26,669|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-21 16:59:26,747|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-21 16:59:26,747|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 835 ms
2020-02-21 16:59:26,795|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-21 16:59:26,796|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-21 16:59:26,797|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-21 16:59:26,798|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-21 16:59:26,798|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-21 16:59:26,798|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-21 16:59:26,798|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-21 16:59:26,798|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
setBeanName
2020-02-21 16:59:26,798|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
setBeanFactory
2020-02-21 16:59:26,798|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
setApplicationContext
2020-02-21 16:59:26,798|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean initAa
2020-02-21 16:59:26,799|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
afterPropertiesSet
2020-02-21 16:59:26,893|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-21 16:59:27,002|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-21 16:59:27,099|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-21 16:59:27,312|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-21 16:59:27,314|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-21 16:59:27,320|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-21 16:59:27,321|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-21 16:59:27,321|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-21 16:59:27,322|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-21 16:59:27,322|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-21 16:59:27,322|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-21 16:59:27,322|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@7e7e962d
2020-02-21 16:59:27,492|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-21 16:59:27,492|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-21 16:59:27,498|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-21 16:59:27,515|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-21 16:59:27,517|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.111 seconds (JVM running for 2.668)
2020-02-21 17:10:08,098|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 17:10:08,099|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-21 17:10:08,099|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-21 17:10:08,099|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 17:10:08,099|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-21 17:10:08,101|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-21 17:10:08,101|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-21 17:10:08,101|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-21 17:10:08,102|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
destroy
2020-02-21 17:26:37,168|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 16560 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-21 17:26:37,171|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-21 17:26:37,868|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-21 17:26:38,042|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-21 17:26:38,050|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-21 17:26:38,050|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-21 17:26:38,050|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-21 17:26:38,124|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-21 17:26:38,125|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 880 ms
2020-02-21 17:26:38,176|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-21 17:26:38,178|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-21 17:26:38,179|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-21 17:26:38,179|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-21 17:26:38,180|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-21 17:26:38,180|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-21 17:26:38,180|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-21 17:26:38,180|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
setBeanName
2020-02-21 17:26:38,180|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
setBeanFactory
2020-02-21 17:26:38,180|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
setApplicationContext
2020-02-21 17:26:38,181|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean initAa
2020-02-21 17:26:38,181|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
afterPropertiesSet
2020-02-21 17:26:38,282|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-21 17:26:38,392|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-21 17:26:38,487|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-21 17:26:38,704|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-21 17:26:38,706|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-21 17:26:38,712|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-21 17:26:38,713|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-21 17:26:38,713|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-21 17:26:38,714|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-21 17:26:38,714|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-21 17:26:38,714|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-21 17:26:38,714|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@51a651c1
2020-02-21 17:26:38,889|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-21 17:26:38,890|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-21 17:26:38,896|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-21 17:26:38,914|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-21 17:26:38,916|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.204 seconds (JVM running for 2.753)
2020-02-21 17:27:32,273|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 17:27:32,273|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-21 17:27:32,273|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-21 17:27:32,273|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 17:27:32,273|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-21 17:27:32,275|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-21 17:27:32,275|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-21 17:27:32,275|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-21 17:27:32,276|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
destroy
2020-02-21 17:27:35,932|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 23656 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-21 17:27:35,936|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-21 17:27:36,613|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-21 17:27:36,786|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-21 17:27:36,794|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-21 17:27:36,794|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-21 17:27:36,794|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-21 17:27:36,878|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-21 17:27:36,879|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 871 ms
2020-02-21 17:27:36,927|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-21 17:27:36,929|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-21 17:27:36,930|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-21 17:27:36,930|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-21 17:27:36,930|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-21 17:27:36,930|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-21 17:27:36,930|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-21 17:27:36,931|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-21 17:27:36,931|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-21 17:27:36,931|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
setBeanName
2020-02-21 17:27:36,931|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
setBeanFactory
2020-02-21 17:27:36,931|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
setApplicationContext
2020-02-21 17:27:36,931|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-21 17:27:36,931|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean initAa
2020-02-21 17:27:36,931|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
afterPropertiesSet
2020-02-21 17:27:36,932|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-21 17:27:37,023|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-21 17:27:37,130|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-21 17:27:37,230|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-21 17:27:37,445|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-21 17:27:37,447|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-21 17:27:37,453|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-21 17:27:37,453|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-21 17:27:37,454|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-21 17:27:37,454|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-21 17:27:37,455|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-21 17:27:37,455|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-21 17:27:37,455|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@5fcd1c5f
2020-02-21 17:27:37,629|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-21 17:27:37,629|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-21 17:27:37,634|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-21 17:27:37,652|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-21 17:27:37,654|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.157 seconds (JVM running for 2.679)
2020-02-21 17:42:51,510|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 17:42:51,510|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-21 17:42:51,511|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-21 17:42:51,511|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 17:42:51,511|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-21 17:42:51,512|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-21 17:42:51,513|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-21 17:42:51,513|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-21 17:42:51,513|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
destroy
2020-02-21 17:42:55,458|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 6948 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-21 17:42:55,462|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-21 17:42:56,204|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-21 17:42:56,389|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-21 17:42:56,396|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-21 17:42:56,397|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-21 17:42:56,397|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-21 17:42:56,485|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-21 17:42:56,485|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 937 ms
2020-02-21 17:42:56,544|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-21 17:42:56,546|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-21 17:42:56,548|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-21 17:42:56,548|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-21 17:42:56,548|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-21 17:42:56,548|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-21 17:42:56,548|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-21 17:42:56,548|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-21 17:42:56,549|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-21 17:42:56,549|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
setBeanName
2020-02-21 17:42:56,549|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
setBeanFactory
2020-02-21 17:42:56,549|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
setApplicationContext
2020-02-21 17:42:56,549|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-21 17:42:56,549|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean initAa
2020-02-21 17:42:56,549|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
afterPropertiesSet
2020-02-21 17:42:56,549|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-21 17:42:56,646|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-21 17:42:56,766|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-21 17:42:56,868|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-21 17:42:57,097|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-21 17:42:57,099|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-21 17:42:57,106|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-21 17:42:57,107|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-21 17:42:57,107|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-21 17:42:57,108|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-21 17:42:57,108|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-21 17:42:57,108|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-21 17:42:57,108|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@20d33ea
2020-02-21 17:42:57,291|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-21 17:42:57,291|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-21 17:42:57,296|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-21 17:42:57,315|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-21 17:42:57,317|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.349 seconds (JVM running for 2.932)
2020-02-21 17:44:01,535|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 17:44:01,535|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-21 17:44:01,535|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-21 17:44:01,535|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 17:44:01,535|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-21 17:44:01,537|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-21 17:44:01,537|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-21 17:44:01,538|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-21 17:44:01,538|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
destroy
2020-02-21 17:44:05,475|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 2248 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-21 17:44:05,478|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-21 17:44:06,176|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-21 17:44:06,190|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-21 17:44:06,193|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,194|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,196|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,196|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,233|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,234|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,234|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,235|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,236|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,239|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,239|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,239|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,239|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,241|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,242|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,242|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,248|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,257|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,260|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,260|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,260|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,263|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,263|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,263|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,263|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,265|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,265|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,268|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,268|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,269|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,269|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,270|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,271|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,272|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,274|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,274|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,276|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,277|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,295|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,295|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,297|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,297|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,298|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,298|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,299|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,299|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,300|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,300|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,302|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,302|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,303|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,305|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,307|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,324|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,326|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,327|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,327|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,328|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,329|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,331|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,333|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,333|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,337|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,337|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,344|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,345|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,347|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,347|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,349|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,444|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-21 17:44:06,452|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-21 17:44:06,453|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-21 17:44:06,453|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-21 17:44:06,528|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-21 17:44:06,529|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 976 ms
2020-02-21 17:44:06,530|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,531|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,533|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,533|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,534|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,536|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,538|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,546|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,547|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,547|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,547|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,549|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,549|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,558|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,559|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,561|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,574|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,575|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,576|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,576|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,578|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,578|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,589|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,590|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,590|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,601|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,601|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,631|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,634|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,635|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,636|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,636|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-21 17:44:06,642|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,643|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,643|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-21 17:44:06,648|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,649|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-21 17:44:06,649|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-21 17:44:06,649|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-21 17:44:06,650|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-21 17:44:06,650|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-21 17:44:06,650|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-21 17:44:06,651|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-21 17:44:06,651|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,651|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
setBeanName
2020-02-21 17:44:06,651|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
setBeanFactory
2020-02-21 17:44:06,651|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
setApplicationContext
2020-02-21 17:44:06,651|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-21 17:44:06,652|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean initAa
2020-02-21 17:44:06,652|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
afterPropertiesSet
2020-02-21 17:44:06,652|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-21 17:44:06,652|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,652|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,654|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,656|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,656|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,658|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,658|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,658|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,660|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,660|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,660|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,661|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,661|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,661|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,663|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,664|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,664|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,665|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,666|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,666|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,667|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,667|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,667|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,668|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,669|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,669|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,671|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,671|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,671|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,673|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,673|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,673|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,675|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,675|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,675|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,675|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,677|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,678|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,681|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,681|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,681|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,682|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,683|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,683|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,693|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,700|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,700|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,702|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,702|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,702|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,704|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,705|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,705|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,710|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,711|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,711|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,712|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,714|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,715|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,716|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,717|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,717|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,720|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,721|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,721|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,724|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,724|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,724|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,728|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,729|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,729|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,739|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,740|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,743|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,744|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,745|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,745|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,746|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,752|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,753|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,754|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,763|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,764|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,764|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,769|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,770|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,778|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,779|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,780|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,780|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,782|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,782|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,783|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,784|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,789|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,790|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,790|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,790|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,791|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,792|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,792|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,792|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,793|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,793|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,794|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,794|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,795|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,795|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,796|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,796|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,797|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,797|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,798|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,800|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,802|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,804|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,804|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,806|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,806|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,807|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,808|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,816|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,817|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,817|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,818|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,819|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,820|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,823|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,826|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,829|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,830|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,851|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,854|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,860|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,860|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,866|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,866|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,869|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,880|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,880|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-21 17:44:06,881|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,896|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,913|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,913|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,914|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,917|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,918|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,936|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,950|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,950|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,963|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,964|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,964|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,966|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,966|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,966|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,968|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,968|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,968|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,970|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,971|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,971|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,980|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,981|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,981|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:06,988|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:06,990|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:06,990|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,004|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,005|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,006|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,006|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,006|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,006|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,009|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,009|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,009|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,012|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,013|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,013|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,014|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,014|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,014|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,016|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,016|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,016|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,023|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,023|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,023|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,028|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,028|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,029|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,038|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,039|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,040|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,046|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,046|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,047|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,048|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,048|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,048|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,079|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,091|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,091|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,095|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,095|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,095|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,103|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-21 17:44:07,192|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,193|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,197|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,201|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,231|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-21 17:44:07,237|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,240|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,242|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,243|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,243|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,244|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,244|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,244|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,246|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,246|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,246|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,247|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,247|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,247|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,248|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,248|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,248|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,249|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,249|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,249|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,252|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,253|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,253|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,254|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,258|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,259|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,264|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,264|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,264|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,421|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,421|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,422|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,428|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,428|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,428|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,430|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,430|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,430|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,430|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,434|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,434|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,438|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,444|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,444|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,452|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,453|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,453|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,454|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,454|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,455|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,460|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,461|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,461|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,462|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,462|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,462|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,463|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,463|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,464|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,464|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,464|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,465|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,465|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,466|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,466|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,466|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,466|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,467|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,468|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,469|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,470|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,471|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,471|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,471|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,471|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,471|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,471|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,473|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,474|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,474|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,483|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,485|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,485|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,486|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,486|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,486|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,491|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,492|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,492|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,493|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,493|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,493|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,494|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,494|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,494|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,495|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,496|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,498|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,513|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,527|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-21 17:44:07,528|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-21 17:44:07,536|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-21 17:44:07,536|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-21 17:44:07,537|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-21 17:44:07,537|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-21 17:44:07,537|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-21 17:44:07,537|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-21 17:44:07,537|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@39666e42
2020-02-21 17:44:07,538|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,538|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,539|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,539|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,539|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,540|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,541|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,541|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,543|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,543|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,543|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,544|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,545|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,545|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,547|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,547|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,547|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,548|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,548|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,548|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,549|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,549|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,550|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,551|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,552|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,554|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,555|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,556|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,556|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,561|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,562|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,562|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,563|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,563|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,563|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,564|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,564|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,564|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,565|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,565|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,565|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,566|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,566|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,566|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,570|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,571|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,571|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,572|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,572|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,572|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,576|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,576|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,576|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,577|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,577|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,577|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,579|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,579|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,579|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,582|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,693|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,693|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,694|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,717|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,718|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:28)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:44:07,718|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:45)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:44:07,737|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:36)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:44:07,757|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-21 17:44:07,757|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-21 17:44:07,763|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-21 17:44:07,782|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-21 17:44:07,784|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.831 seconds (JVM running for 3.423)
2020-02-21 17:47:02,599|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 17:47:02,599|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-21 17:47:02,599|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-21 17:47:02,599|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 17:47:02,599|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-21 17:47:02,601|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-21 17:47:02,601|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-21 17:47:02,602|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-21 17:47:02,602|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
destroy
2020-02-21 17:47:06,704|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 11172 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-21 17:47:06,707|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-21 17:47:07,463|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-21 17:47:07,479|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-21 17:47:07,706|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-21 17:47:07,715|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-21 17:47:07,715|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-21 17:47:07,716|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-21 17:47:07,798|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-21 17:47:07,798|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 1018 ms
2020-02-21 17:47:07,905|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:47:07,906|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-21 17:47:07,911|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:47:07,913|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法
2020-02-21 17:47:07,913|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-21 17:47:07,918|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法
2020-02-21 17:47:07,919|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-21 17:47:07,920|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-21 17:47:07,920|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-21 17:47:07,920|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-21 17:47:07,920|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-21 17:47:07,920|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-21 17:47:07,920|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-21 17:47:07,921|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:47:07,921|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
setBeanName
2020-02-21 17:47:07,921|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
setBeanFactory
2020-02-21 17:47:07,921|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
setApplicationContext
2020-02-21 17:47:07,921|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-21 17:47:07,921|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean initAa
2020-02-21 17:47:07,921|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
afterPropertiesSet
2020-02-21 17:47:07,921|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-21 17:47:07,921|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法
2020-02-21 17:47:08,115|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-21 17:47:08,326|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-21 17:47:08,434|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-21 17:47:08,718|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-21 17:47:08,720|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-21 17:47:08,727|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-21 17:47:08,727|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-21 17:47:08,728|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-21 17:47:08,729|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-21 17:47:08,729|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-21 17:47:08,729|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-21 17:47:08,729|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@511f5b1d
2020-02-21 17:47:08,947|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-21 17:47:08,948|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-21 17:47:08,953|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-21 17:47:08,972|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-21 17:47:08,975|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.827 seconds (JVM running for 3.406)
2020-02-21 17:47:39,488|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 17:47:39,488|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-21 17:47:39,488|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-21 17:47:39,488|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 17:47:39,488|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-21 17:47:39,490|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-21 17:47:39,490|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-21 17:47:39,491|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-21 17:47:39,491|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
destroy
2020-02-21 17:47:43,387|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 6184 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-21 17:47:43,390|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-21 17:47:44,115|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-21 17:47:44,130|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-21 17:47:44,356|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-21 17:47:44,364|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-21 17:47:44,364|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-21 17:47:44,364|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-21 17:47:44,436|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-21 17:47:44,437|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 962 ms
2020-02-21 17:47:44,536|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-21 17:47:44,537|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:32)
TestBean constrance
2020-02-21 17:47:44,542|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-21 17:47:44,543|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean2
2020-02-21 17:47:44,544|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.<init>(TestBean2.java:31)
TestBean2 constrance
2020-02-21 17:47:44,549|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean2
2020-02-21 17:47:44,550|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanName(TestBean2.java:51)
setBeanName
2020-02-21 17:47:44,550|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setBeanFactory(TestBean2.java:46)
setBeanFactory
2020-02-21 17:47:44,550|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.setApplicationContext(TestBean2.java:66)
setApplicationContext
2020-02-21 17:47:44,550|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean2
2020-02-21 17:47:44,550|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.init(TestBean2.java:41)
TestBean2 initA
2020-02-21 17:47:44,550|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean2.afterPropertiesSet(TestBean2.java:61)
afterPropertiesSet
2020-02-21 17:47:44,551|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean2
2020-02-21 17:47:44,551|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean2
2020-02-21 17:47:44,551|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:52)
setBeanName
2020-02-21 17:47:44,551|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:47)
setBeanFactory
2020-02-21 17:47:44,551|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:67)
setApplicationContext
2020-02-21 17:47:44,551|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-21 17:47:44,551|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:42)
TestBean initAa
2020-02-21 17:47:44,551|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:62)
afterPropertiesSet
2020-02-21 17:47:44,551|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-21 17:47:44,551|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-21 17:47:44,749|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-21 17:47:44,959|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-21 17:47:45,021|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-21 17:47:45,343|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-21 17:47:45,345|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-21 17:47:45,352|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-21 17:47:45,352|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-21 17:47:45,353|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-21 17:47:45,353|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-21 17:47:45,353|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-21 17:47:45,353|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-21 17:47:45,353|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@22d322f5
2020-02-21 17:47:45,562|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-21 17:47:45,562|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-21 17:47:45,567|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-21 17:47:45,587|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-21 17:47:45,590|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.719 seconds (JVM running for 3.3)
2020-02-21 22:20:42,092|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 22:20:42,092|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-21 22:20:42,092|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-21 22:20:42,092|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 22:20:42,093|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-21 22:20:42,095|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-21 22:20:42,095|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-21 22:20:42,096|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean2.destroy(TestBean2.java:56)
destroy
2020-02-21 22:20:42,096|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:57)
destroy
2020-02-21 22:20:46,208|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 22652 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-21 22:20:46,241|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-21 22:20:46,875|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-21 22:20:46,889|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-21 22:20:47,097|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-21 22:20:47,112|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-21 22:20:47,113|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-21 22:20:47,113|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-21 22:20:47,182|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-21 22:20:47,182|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 904 ms
2020-02-21 22:20:47,278|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-21 22:20:47,278|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:29)
TestBean constrance
2020-02-21 22:20:47,283|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-21 22:20:47,283|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:48)
setBeanName
2020-02-21 22:20:47,283|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:43)
setBeanFactory
2020-02-21 22:20:47,283|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:63)
setApplicationContext
2020-02-21 22:20:47,283|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-21 22:20:47,284|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:38)
TestBean init
2020-02-21 22:20:47,284|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:58)
afterPropertiesSet
2020-02-21 22:20:47,284|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-21 22:20:47,284|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-21 22:20:47,465|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-21 22:20:47,667|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-21 22:20:47,778|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-21 22:20:48,052|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-21 22:20:48,054|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-21 22:20:48,061|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-21 22:20:48,061|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-21 22:20:48,062|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-21 22:20:48,062|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-21 22:20:48,062|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-21 22:20:48,062|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-21 22:20:48,063|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@9f86dc3
2020-02-21 22:20:48,258|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-21 22:20:48,259|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-21 22:20:48,264|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-21 22:20:48,281|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-21 22:20:48,284|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.511 seconds (JVM running for 3.042)
2020-02-21 22:21:29,428|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 22:21:29,428|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-21 22:21:29,429|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-21 22:21:29,429|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 22:21:29,429|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-21 22:21:29,430|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-21 22:21:29,431|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-21 22:21:29,431|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:53)
destroy
2020-02-21 22:21:33,038|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 15856 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-21 22:21:33,041|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-21 22:21:33,683|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-21 22:21:33,697|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-21 22:21:33,907|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-21 22:21:33,915|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-21 22:21:33,915|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-21 22:21:33,915|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-21 22:21:33,991|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-21 22:21:33,991|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 884 ms
2020-02-21 22:21:34,087|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-21 22:21:34,087|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:29)
TestBean constrance
2020-02-21 22:21:34,092|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-21 22:21:34,092|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:48)
TestBean setBeanName
2020-02-21 22:21:34,092|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:43)
TestBean setBeanFactory
2020-02-21 22:21:34,092|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:63)
TestBean setApplicationContext
2020-02-21 22:21:34,092|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-21 22:21:34,092|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:38)
TestBean init
2020-02-21 22:21:34,093|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:58)
TestBean afterPropertiesSet
2020-02-21 22:21:34,093|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-21 22:21:34,093|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-21 22:21:34,274|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-21 22:21:34,475|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-21 22:21:34,581|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-21 22:21:34,853|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-21 22:21:34,855|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-21 22:21:34,862|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-21 22:21:34,862|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-21 22:21:34,862|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-21 22:21:34,863|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-21 22:21:34,863|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-21 22:21:34,863|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-21 22:21:34,863|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@a7cf42f
2020-02-21 22:21:35,060|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-21 22:21:35,060|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-21 22:21:35,065|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-21 22:21:35,084|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-21 22:21:35,087|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.483 seconds (JVM running for 3.018)
2020-02-21 22:23:13,431|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 22:23:13,432|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-21 22:23:13,432|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-21 22:23:13,432|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 22:23:13,432|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-21 22:23:13,434|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-21 22:23:13,434|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-21 22:23:13,434|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:53)
TestBean destroy
2020-02-21 22:23:15,877|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarting(StartupInfoLogger.java:55)
Starting NoteApplication on DESKTOP-3EKU3ND with PID 23568 (F:\code\Z01\server\z01\note\target\classes started by 13265 in F:\code\Z01\server\z01)
2020-02-21 22:23:15,880|INFO |main|Caller+0	 at org.springframework.boot.SpringApplication.logStartupProfileInfo(SpringApplication.java:655)
The following profiles are active: common
2020-02-21 22:23:16,537|INFO |main|Caller+0	 at org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization(PostProcessorRegistrationDelegate.java:330)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-02-21 22:23:16,550|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.<init>(MyInstantiationAwareBeanPostProcessor.java:21)
这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！
2020-02-21 22:23:16,759|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:92)
Tomcat initialized with port(s): 8085 (http)
2020-02-21 22:23:16,766|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing ProtocolHandler ["http-nio-8085"]
2020-02-21 22:23:16,766|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting service [Tomcat]
2020-02-21 22:23:16,766|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-02-21 22:23:16,843|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Initializing Spring embedded WebApplicationContext
2020-02-21 22:23:16,844|INFO |main|Caller+0	 at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.prepareWebApplicationContext(ServletWebServerApplicationContext.java:284)
Root WebApplicationContext: initialization completed in 900 ms
2020-02-21 22:23:16,938|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(MyInstantiationAwareBeanPostProcessor.java:29)
InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法class com.zemel.note.spring.TestBean
2020-02-21 22:23:16,939|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.<init>(TestBean.java:29)
TestBean constrance
2020-02-21 22:23:16,943|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessPropertyValues(MyInstantiationAwareBeanPostProcessor.java:48)
InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法class com.zemel.note.spring.TestBean
2020-02-21 22:23:16,944|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanName(TestBean.java:48)
TestBean setBeanName
2020-02-21 22:23:16,944|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setBeanFactory(TestBean.java:43)
TestBean setBeanFactory
2020-02-21 22:23:16,944|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.setApplicationContext(TestBean.java:63)
TestBean setApplicationContext
2020-02-21 22:23:16,944|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessBeforeInitialization(MyBeanPostProcessor.java:20)
MyBeanPostProcessor.postProcessBeforeInitializationclass com.zemel.note.spring.TestBean
2020-02-21 22:23:16,944|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.init(TestBean.java:38)
TestBean init
2020-02-21 22:23:16,944|ERROR|main|Caller+0	 at com.zemel.note.spring.TestBean.afterPropertiesSet(TestBean.java:58)
TestBean afterPropertiesSet
2020-02-21 22:23:16,944|ERROR|main|Caller+0	 at com.zemel.note.spring.MyBeanPostProcessor.postProcessAfterInitialization(MyBeanPostProcessor.java:27)
MyBeanPostProcessor.postProcessAfterInitializationclass com.zemel.note.spring.TestBean
2020-02-21 22:23:16,944|ERROR|main|Caller+0	 at com.zemel.note.spring.MyInstantiationAwareBeanPostProcessor.postProcessAfterInitialization(MyInstantiationAwareBeanPostProcessor.java:38)
InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法class com.zemel.note.spring.TestBean
2020-02-21 22:23:17,124|INFO |main|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.initialize(ExecutorConfigurationSupport.java:171)
Initializing ExecutorService 'applicationTaskExecutor'
2020-02-21 22:23:17,317|INFO |main|Caller+0	 at com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource(DruidDataSourceAutoConfigure.java:56)
Init DruidDataSource
2020-02-21 22:23:17,420|INFO |main|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:928)
{dataSource-1} inited
2020-02-21 22:23:17,690|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1220)
Using default implementation for ThreadExecutor
2020-02-21 22:23:17,692|INFO |main|Caller+0	 at org.quartz.simpl.SimpleThreadPool.initialize(SimpleThreadPool.java:268)
Job execution threads will use class loader of thread: main
2020-02-21 22:23:17,698|INFO |main|Caller+0	 at org.quartz.core.SchedulerSignalerImpl.<init>(SchedulerSignalerImpl.java:61)
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-02-21 22:23:17,699|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.<init>(QuartzScheduler.java:229)
Quartz Scheduler v.2.3.2 created.
2020-02-21 22:23:17,699|INFO |main|Caller+0	 at org.quartz.simpl.RAMJobStore.initialize(RAMJobStore.java:155)
RAMJobStore initialized.
2020-02-21 22:23:17,700|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.initialize(QuartzScheduler.java:294)
Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 4 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-02-21 22:23:17,700|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1374)
Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2020-02-21 22:23:17,700|INFO |main|Caller+0	 at org.quartz.impl.StdSchedulerFactory.instantiate(StdSchedulerFactory.java:1378)
Quartz scheduler version: 2.3.2
2020-02-21 22:23:17,700|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.setJobFactory(QuartzScheduler.java:2293)
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@4f169009
2020-02-21 22:23:17,894|INFO |main|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.startScheduler(SchedulerFactoryBean.java:727)
Starting Quartz Scheduler now
2020-02-21 22:23:17,894|INFO |main|Caller+0	 at org.quartz.core.QuartzScheduler.start(QuartzScheduler.java:547)
Scheduler quartzScheduler_$_NON_CLUSTERED started.
2020-02-21 22:23:17,899|INFO |main|Caller+0	 at org.apache.juli.logging.DirectJDKLog.log(DirectJDKLog.java:173)
Starting ProtocolHandler ["http-nio-8085"]
2020-02-21 22:23:17,917|INFO |main|Caller+0	 at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:204)
Tomcat started on port(s): 8085 (http) with context path ''
2020-02-21 22:23:17,919|INFO |main|Caller+0	 at org.springframework.boot.StartupInfoLogger.logStarted(StartupInfoLogger.java:61)
Started NoteApplication in 2.489 seconds (JVM running for 3.026)
2020-02-21 22:46:49,404|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 22:46:49,405|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.quartz.SchedulerFactoryBean.destroy(SchedulerFactoryBean.java:845)
Shutting down Quartz Scheduler
2020-02-21 22:46:49,405|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:666)
Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2020-02-21 22:46:49,405|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.standby(QuartzScheduler.java:585)
Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2020-02-21 22:46:49,405|INFO |SpringContextShutdownHook|Caller+0	 at org.quartz.core.QuartzScheduler.shutdown(QuartzScheduler.java:740)
Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2020-02-21 22:46:49,406|INFO |SpringContextShutdownHook|Caller+0	 at com.alibaba.druid.pool.DruidDataSource.close(DruidDataSource.java:1823)
{dataSource-1} closed
2020-02-21 22:46:49,407|INFO |SpringContextShutdownHook|Caller+0	 at org.springframework.scheduling.concurrent.ExecutorConfigurationSupport.shutdown(ExecutorConfigurationSupport.java:208)
Shutting down ExecutorService 'applicationTaskExecutor'
2020-02-21 22:46:49,407|ERROR|SpringContextShutdownHook|Caller+0	 at com.zemel.note.spring.TestBean.destroy(TestBean.java:53)
TestBean destroy
